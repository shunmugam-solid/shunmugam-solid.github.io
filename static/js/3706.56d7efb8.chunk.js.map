{"version":3,"file":"static/js/3706.56d7efb8.chunk.js","mappings":"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","sources":["components/CurrencyInput.tsx","utils/crypto.ts","components/QrScanner.tsx","views/crypto/sendCrypto/SendCryptoAmount/SendCryptoAmount.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","import store from '../store';\n\n/**\n * Get min limit\n * @param currency\n * @param source\n * @param amountType\n * @returns {number}\n */\nexport const getMinLimit = (currency: string, source: 'send' | 'buy' | 'sell', amountType: string = 'quantity') => {\n  const supportedCurrencies = store.getState().crypto.supportedCurrencies.data;\n\n  const selectedCurrency = supportedCurrencies.find((c) => c.currency === currency);\n\n  if (selectedCurrency) {\n    const limit = selectedCurrency.limits[source];\n    return amountType === 'quantity' ? limit.minimumQty : limit.minimumAmount || '0';\n  }\n  return '0';\n};\n\nexport const getPrecision = (currency: string, source: 'send' | 'buy' | 'sell') => {\n  const supportedCurrencies = store.getState().crypto.supportedCurrencies.data;\n\n  const selectedCurrency = supportedCurrencies.find((c) => c.currency === currency);\n\n  if (selectedCurrency) {\n    const limit = selectedCurrency.limits[source];\n    const precision = limit.minimumQty?.split('.')[1]?.length || 2;\n    return precision !== 0 ? precision : 2;\n  }\n  return 6;\n};\n","import React, { useCallback, useImperativeHandle, useRef } from 'react';\nimport {\n  Modal, ModalOverlay, ModalContent, ModalHeader, ModalCloseButton, ModalBody, useDisclosure,\n} from '@chakra-ui/react';\nimport { Html5Qrcode } from 'html5-qrcode';\n\nexport type QrScannerRef = {\n    open:() => void\n}\n\ninterface QrDimensions {\n  width: number;\n  height: number;\n}\n\ntype Props = {\n  fps?: number\n  qrbox?: number | QrDimensions\n  aspectRatio?: string\n  disableFlip?: boolean\n  onSuccess: (v: string) => void\n  onError?: () => void\n}\n\nconst qrcodeRegionId = 'html5qr-code-full-region';\n\nconst QrScanner = React.forwardRef((props: Props, ref) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const scanner = useRef<any>(null);\n\n  const createConfig = useCallback(() => {\n    const config: any = {\n      // supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA]\n    };\n    if (props.fps) {\n      config.fps = props.fps;\n    }\n    if (props.qrbox) {\n      config.qrbox = props.qrbox;\n    }\n    if (props.aspectRatio) {\n      config.aspectRatio = props.aspectRatio;\n    }\n    if (props.disableFlip !== undefined) {\n      config.disableFlip = props.disableFlip;\n    }\n    return config;\n  }, [props]);\n\n  const close = useCallback(() => {\n    onClose();\n    if (scanner.current) {\n      scanner.current.stop().catch((error: any) => {\n        console.error('Failed to clear html5QrcodeScanner. ', error);\n      });\n    }\n  }, [scanner.current]);\n\n  useImperativeHandle(ref, () => ({\n    open: () => {\n      onOpen();\n      setTimeout(() => {\n        const config = createConfig();\n\n        scanner.current = new Html5Qrcode(qrcodeRegionId);\n\n        scanner.current.start(\n          { facingMode: 'environment' },\n          config,\n          (v:string) => {\n            props.onSuccess(v);\n            close();\n          },\n          props.onError\n        );\n      }, 0);\n    }\n  }));\n\n  return (\n    <Modal onClose={close} size=\"full\" isOpen={isOpen}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>Scan</ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <div id={qrcodeRegionId} />\n        </ModalBody>\n\n      </ModalContent>\n    </Modal>\n  );\n});\n\nexport default QrScanner;\n","import React, {\n  useCallback, useEffect, useMemo, useRef, useState\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Button, FormControl, FormLabel, Input, useStyleConfig, Text, InputGroup, InputRightElement\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../../layout/MiniBox';\nimport Icon from '../../../../components/Icon';\nimport QrScanner, { QrScannerRef } from '../../../../components/QrScanner';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport { updateSendFormData } from '../../../../store/actionCreators/crypto';\nimport { apiErrorHandler } from '../../../../utils/general';\nimport { getGasFees, getSupportedCurrencies } from '../../../../store/middlewares/crypto';\nimport { useModulePageData } from '../../../../hooks/module';\nimport { SendCryptoData } from '../../../../modules/Crypto/SendCrypto';\nimport { Data } from '../../../../modules/Crypto';\nimport { sendMessage } from '../../../../utils/sdk';\nimport { COMMON } from '../../../../const/messages';\nimport { getMinLimit, getPrecision } from '../../../../utils/crypto';\nimport CurrencyInput from '../../../../components/CurrencyInput';\n\nconst SendCryptoAmount = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const navigate = useNavigate();\n\n  const style:any = useStyleConfig('FormControl', {\n    variant: 'primary'\n  });\n\n  const ref = useRef<QrScannerRef | null>(null);\n\n  const [destinationCryptoAddress, updateDestinationCryptoAddress] = useState('');\n  const [amount, updateAmount] = useState('');\n  const [description, updateDescription] = useState('');\n\n  const { selectedAccount: cryptoAccount, supportedCurrencies } = useAppSelector((store) => store.crypto, shallowEqual);\n\n  const amountPrecision = useMemo(() => {\n    if (cryptoAccount?.currency) {\n      return getPrecision(cryptoAccount?.currency, 'send');\n    }\n    return 2;\n  }, [cryptoAccount, supportedCurrencies]);\n\n  const min = useMemo(() => {\n    if (cryptoAccount?.currency) {\n      return getMinLimit(cryptoAccount?.currency, 'send', 'quantity');\n    }\n    return 0;\n  }, [cryptoAccount, supportedCurrencies]);\n\n  const defaultValue = useMemo(() => `0.${'0'.repeat(amountPrecision)}`, [amountPrecision]);\n\n  const isValid = useMemo(() => amount !== '' && parseFloat(amount) > 0 && description !== '' && destinationCryptoAddress.length !== 0, [amount, description, destinationCryptoAddress]);\n\n  const { showBack } = useModulePageData<SendCryptoData, Data<'sendCrypto'>['startScreen']>('sendCrypto');\n\n  useEffect(() => {\n    dispatch(getSupportedCurrencies());\n  }, []);\n\n  const onSubmit = useCallback(() => {\n    if (isValid && cryptoAccount) {\n      dispatch(getGasFees({\n        cryptoCurrency: cryptoAccount.currency,\n      })).then(() => {\n        dispatch(updateSendFormData({\n          destinationCryptoAddress,\n          cryptoCurrency: cryptoAccount.currency,\n          quantity: amount,\n          description\n        }));\n        navigate('/crypto/send/preview');\n      }).catch(apiErrorHandler);\n    }\n  }, [isValid, amount, description, cryptoAccount?.currency, destinationCryptoAddress]);\n\n  return (\n    <div className=\"page\">\n      <form\n        autoComplete=\"off\"\n        onSubmit={(e) => {\n          e.preventDefault();\n          onSubmit();\n        }}\n      >\n        <MiniBox\n          showBack={showBack}\n          heading={t('send_crypto_amount.title')}\n          onBack={() => {\n            sendMessage(COMMON.BACK_PRESSED, { from: 'sendCrypto' });\n          }}\n          footer={(\n            <Button disabled={!isValid} width=\"100%\" variant=\"primary\" type=\"submit\">\n              {t('send_crypto_amount.ctaText')}\n            </Button>\n          )}\n        >\n          <Box width=\"100%\" paddingTop=\"15px\">\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('send_crypto_amount.walletAddress', { currency: cryptoAccount?.currency })}\n              </FormLabel>\n              <InputGroup>\n                <Input\n                  variant=\"primary\"\n                  value={destinationCryptoAddress}\n                  paddingRight=\"30px\"\n                  onChange={(e) => updateDestinationCryptoAddress(e.target.value)}\n                />\n                <InputRightElement\n                  className={style.inputRightElement}\n                  cursor=\"pointer\"\n                  height=\"100%\"\n                  onClick={() => {\n                    ref?.current?.open();\n                  }}\n                >\n                  <Icon icon=\"photo\" size={16} />\n                </InputRightElement>\n              </InputGroup>\n\n            </FormControl>\n            <Text variant=\"small\" whiteSpace=\"pre-line\" color=\"#2EC193\" p=\"24px\" pt=\"8px\" textAlign=\"left\">{t('send_crypto_amount.note', { currency: cryptoAccount?.currency })}</Text>\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('send_crypto_amount.quantity')}\n              </FormLabel>\n              <CurrencyInput\n                prefix=\"\"\n                digits={amountPrecision}\n                placeholder={defaultValue}\n                value={amount}\n                onChange={(value) => {\n                  updateAmount(value);\n                }}\n              />\n\n              <Text variant=\"small\" className=\"text-light\" textAlign=\"right\">\n                {`Min: ${min} ${cryptoAccount?.currency}`}\n              </Text>\n            </FormControl>\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('send_crypto_amount.description')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                type=\"text\"\n                value={description}\n                onChange={(e) => updateDescription(e.target.value)}\n              />\n            </FormControl>\n          </Box>\n          <Text variant=\"small\" pt=\"24px\" whiteSpace=\"pre-line\" mt=\"auto\" textAlign=\"center\">{t('send_crypto_amount.footerInfo')}</Text>\n        </MiniBox>\n        <QrScanner\n          ref={ref}\n          onSuccess={(value) => {\n            updateDestinationCryptoAddress(value);\n          }}\n          fps={50}\n          aspectRatio=\"1.0\"\n          qrbox={{ width: 250, height: 400 }}\n        />\n      </form>\n\n    </div>\n  );\n};\n\nexport default SendCryptoAmount;\n"],"names":["_ref","onChange","value","placeholder","prefix","digits","input","useRef","useLayoutEffect","current","Inputmask","autoUnmask","allowMinus","rightAlign","numericInput","mask","_jsx","Input","variant","ref","e","v","target","getMinLimit","currency","source","amountType","arguments","length","undefined","selectedCurrency","store","getState","crypto","supportedCurrencies","data","find","c","limit","limits","minimumQty","minimumAmount","getPrecision","_limit$minimumQty","_limit$minimumQty$spl","precision","split","qrcodeRegionId","React","props","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","scanner","createConfig","useCallback","config","fps","qrbox","aspectRatio","disableFlip","close","stop","catch","error","console","useImperativeHandle","open","setTimeout","Html5Qrcode","start","facingMode","onSuccess","onError","_jsxs","Modal","size","children","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","id","t","useTranslation","dispatch","useAppAsyncDispatch","navigate","useNavigate","style","useStyleConfig","_useState","useState","_useState2","_slicedToArray","destinationCryptoAddress","updateDestinationCryptoAddress","_useState3","_useState4","amount","updateAmount","_useState5","_useState6","description","updateDescription","_useAppSelector","useAppSelector","shallowEqual","cryptoAccount","selectedAccount","amountPrecision","useMemo","min","defaultValue","concat","repeat","isValid","parseFloat","showBack","useModulePageData","useEffect","getSupportedCurrencies","onSubmit","getGasFees","cryptoCurrency","then","updateSendFormData","quantity","apiErrorHandler","className","autoComplete","preventDefault","MiniBox","heading","onBack","sendMessage","COMMON","BACK_PRESSED","from","footer","Button","disabled","width","type","Box","paddingTop","FormControl","FormLabel","InputGroup","paddingRight","InputRightElement","inputRightElement","cursor","height","onClick","_ref$current","Icon","icon","Text","whiteSpace","color","p","pt","textAlign","CurrencyInput","mt","QrScanner"],"sourceRoot":""}