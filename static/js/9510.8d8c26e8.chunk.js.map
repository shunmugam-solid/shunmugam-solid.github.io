{"version":3,"file":"static/js/9510.8d8c26e8.chunk.js","mappings":"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","sources":["webpack://drop-in-ui/./src/components/AccountListItem.module.css?b978","components/AccountListItem.tsx","webpack://drop-in-ui/./src/views/ao/Account/List/List.module.css?7afe","views/ao/Account/List/List.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"AccountListItem_listItem__EP7DX\",\"tag\":\"AccountListItem_tag__Il-LV\",\"tagCash\":\"AccountListItem_tagCash__qGgKp\",\"tagCard\":\"AccountListItem_tagCard__2+Rzz\",\"tagCrypto\":\"AccountListItem_tagCrypto__KVpIj\"};","import {\n  Box, Flex, ListItem, Text\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { account } from '../types/account';\nimport { cryptoAccount } from '../types/crypto';\nimport { currencyFormat, isCrypto } from '../utils/general';\nimport style from './AccountListItem.module.css';\n\ntype Props = {\n    accountDetails: account | cryptoAccount,\n    onSelect?: (a: account | cryptoAccount) => void\n}\n\nconst AccountListItem:React.FC<Props> = ({ accountDetails: a, onSelect }) => {\n  const { t } = useTranslation();\n\n  return (\n    <ListItem\n      className={`${style.listItem}`}\n      onClick={() => {\n        if (onSelect) {\n          onSelect(a);\n        }\n      }}\n    >\n      <Flex gap={4}>\n        {isCrypto(a) ? (\n          <Box className={`${style.tag} ${style.tagCrypto}`}>\n            <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.crypto')}</Text>\n          </Box>\n        ) : (\n          a.type === 'cardAccount' ? (\n            <Box className={`${style.tag} ${style.tagCard}`}>\n              <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.card')}</Text>\n            </Box>\n          ) : (\n            <Box className={`${style.tag} ${style.tagCash}`}>\n              <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.cash')}</Text>\n            </Box>\n          )\n        )}\n        <Box>\n          <Text variant=\"regular\" className=\"text-dark\" textAlign=\"left\">{a.label}</Text>\n          <Text variant=\"small\" textAlign=\"left\" className=\"text-light\">\n            {t('account_list.balance')}\n            : &nbsp;\n            { isCrypto(a) ? (`${a.cryptoBalance} ${a.currency}`) : currencyFormat(a.availableBalance, a.currency)}\n          </Text>\n        </Box>\n      </Flex>\n    </ListItem>\n  );\n};\n\nexport default AccountListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"bodyStyles\":\"List_bodyStyles__+-493\"};","import React, {\n  useCallback, useEffect, useMemo, useState\n} from 'react';\nimport {\n  Box, Button, Center, Flex, List, Text\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport { listAllAccounts } from '../../../../store/middlewares/account';\nimport { listAllbusiness } from '../../../../store/middlewares/business';\nimport { updateAccountsByBusiness, updateSelectedAccountDetails, updateSelectedAccountType } from '../../../../store/actionCreators/account';\nimport { apiErrorHandler, currencyFormat, isCrypto } from '../../../../utils/general';\nimport { AccountsByBusiness } from '../../../../types/business';\nimport AccountListItem from '../../../../components/AccountListItem';\nimport { listAllCryptoAccounts } from '../../../../store/middlewares/crypto';\nimport { updateSelectedCryptoAccount } from '../../../../store/actionCreators/crypto';\nimport Icon from '../../../../components/Icon';\nimport style from './List.module.css';\nimport { updateSelectedBusiness } from '../../../../store/actionCreators/business';\n\nconst AccountList: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useAppAsyncDispatch();\n  const person = useAppSelector((store) => store.user.personDetails, shallowEqual);\n  const [accountsData, updateAccounts] = useState<AccountsByBusiness[]>([]);\n  const [isReady, updateReadyState] = useState(false);\n\n  const programConfig = useAppSelector((store) => store.core.programConfig, shallowEqual);\n  const totalAccounts = useAppSelector((store) => store.account.totalAccounts);\n\n  const [accountType] = useState<any>('cash');\n\n  const fetchAccountsByBusiness = useCallback(() => {\n    dispatch(listAllbusiness())\n      .then(({ data }) => {\n        const businessMap: {\n            [id: string]: AccountsByBusiness\n        } = {\n          personChecking: {\n            id: 'personChecking',\n            legalName: `${person?.firstName} ${person?.lastName}`,\n            // accounts: [],\n            totalBalance: 0.00,\n            total: 0\n          } as AccountsByBusiness\n        };\n        data.forEach((b) => {\n          businessMap[b.id] = {\n            ...b,\n            accounts: [],\n            totalBalance: 0.00,\n            total: 0\n          };\n        });\n        if (accountType === 'cash') {\n          dispatch(listAllAccounts(null, 'all', 50))\n            .then(({ data: accounts }) => {\n              accounts.forEach((acc) => {\n                const a = { ...acc };\n                if (a.businessId === '') {\n                  a.businessId = 'personChecking';\n                }\n                if (businessMap[a.businessId]) {\n                  if (businessMap[a.businessId].accounts === undefined) {\n                    businessMap[a.businessId].accounts = [];\n                  }\n                  businessMap[a.businessId].accounts.push(a);\n                  businessMap[a.businessId].total += 1;\n                  businessMap[a.businessId].totalBalance += parseFloat(a.availableBalance);\n                }\n              });\n\n              updateAccounts(Object.values(businessMap));\n              dispatch(updateAccountsByBusiness(businessMap));\n            })\n            .catch(apiErrorHandler)\n            .finally(() => {\n              updateReadyState(true);\n            });\n        } else if (accountType === 'crypto') {\n          dispatch(listAllCryptoAccounts(null, 'all', 50))\n            .then(({ data: accounts }) => {\n              accounts.forEach((acc) => {\n                const a = { ...acc };\n                if (a.businessId === '') {\n                  a.businessId = 'personChecking';\n                }\n                if (businessMap[a.businessId]) {\n                  if (businessMap[a.businessId].accounts === undefined) {\n                    businessMap[a.businessId].accounts = [];\n                  }\n                  businessMap[a.businessId].accounts.push(a);\n                  businessMap[a.businessId].total += 1;\n                  businessMap[a.businessId].totalBalance += parseFloat(a.usdBalance);\n                }\n              });\n\n              updateAccounts(Object.values(businessMap));\n              dispatch(updateAccountsByBusiness(businessMap));\n            })\n            .catch(apiErrorHandler)\n            .finally(() => {\n              updateReadyState(true);\n            });\n        }\n      }).catch(apiErrorHandler);\n  }, [accountType]);\n\n  useEffect(() => {\n    fetchAccountsByBusiness();\n  }, [accountType]);\n\n  const maxAccounts = useMemo(() => {\n    try {\n      const personal = parseInt(programConfig?.bank?.maxAccounts?.personal, 10);\n      const business = parseInt(programConfig?.bank?.maxAccounts?.business, 10);\n\n      return personal + business;\n    } catch {\n      return -1; // no limit\n    }\n  }, [programConfig]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        varient=\"box\"\n        showBack\n        bodyClass={style.bodyStyles}\n        onBack={() => {\n          navigate(-1);\n        }}\n        footer={(maxAccounts === -1 || maxAccounts > totalAccounts) ? (\n          <Button\n            width=\"100%\"\n            variant=\"primary\"\n            onClick={() => {\n              navigate('/ao/account/setup-options');\n            }}\n          >\n            {t('account_list.buttn_addAccount')}\n          </Button>\n        ) : null}\n      >\n        <Box width=\"100%\">\n          {accountsData.length === 0 && isReady ? (\n            <Center py={2}>\n              <Text variant=\"regular\" textAlign=\"center\" className=\"text-light\">\n                {t('account_list.noData', 'No Account found')}\n              </Text>\n            </Center>\n          )\n            : accountsData.map((b, i) => (\n              b.legalName !== '' && b.total > 0\n                ? (\n                  <Box key={b.legalName} paddingTop={i !== 0 ? '30px' : '0'}>\n                    <Flex justifyContent=\"space-between\" marginBottom=\"16px\">\n                      <Box>\n                        <Text variant=\"regular\" fontWeight=\"500\" display=\"block\" textAlign=\"left\">{b.legalName}</Text>\n                        <Text variant=\"small\" display=\"block\" textAlign=\"left\">\n                          {b.total}\n                          {' '}\n                          {t('account_list.accounts')}\n                        </Text>\n                      </Box>\n                      <Box>\n                        <Text display=\"block\" variant=\"regular\" textAlign=\"right\" className=\"text-dark\">\n                          {currencyFormat(b.totalBalance)}\n                        </Text>\n                        {b.total > 2\n                          ? (\n                            <Flex\n                              alignItems=\"center\"\n                              cursor=\"pointer\"\n                              justifyContent=\"flex-end\"\n                              onClick={() => {\n                                navigate(`/ao/account/list-by-business/${b.id}`);\n                              }}\n                            >\n                              <Text textAlign=\"right\" display=\"block\" variant=\"regular\" className=\"text-light\">{t('account_list.viewAll')}</Text>\n                              <Icon icon=\"Arrow-small-right\" size={11} style={{ marginLeft: '8px', width: 'auto' }} className=\"svg-light-grey-1\" />\n                            </Flex>\n                          ) : null }\n                      </Box>\n                    </Flex>\n                    <List>\n                      {b.accounts?.slice(0, 2).map((a) => (\n                        <AccountListItem\n                          key={a.id}\n                          accountDetails={a}\n                          onSelect={(selectedAccount) => {\n                            if (accountType === 'crypto' && isCrypto(selectedAccount)) {\n                              dispatch(updateSelectedCryptoAccount(selectedAccount));\n                            } else if (!isCrypto(selectedAccount)) {\n                              dispatch(updateSelectedAccountDetails(selectedAccount));\n                            }\n                            dispatch(updateSelectedAccountType(accountType));\n                            dispatch(updateSelectedBusiness(b));\n                            navigate('/dashboard');\n                          }}\n                        />\n                      ))}\n                    </List>\n                  </Box>\n                ) : null\n            ))}\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default AccountList;\n"],"names":["_ref","a","accountDetails","onSelect","t","useTranslation","_jsx","ListItem","className","concat","style","onClick","children","_jsxs","Flex","gap","isCrypto","Box","Text","variant","textAlign","color","type","label","cryptoBalance","currency","currencyFormat","availableBalance","navigate","useNavigate","dispatch","useAppAsyncDispatch","person","useAppSelector","store","user","personDetails","shallowEqual","_useState","useState","_useState2","_slicedToArray","accountsData","updateAccounts","_useState3","_useState4","isReady","updateReadyState","programConfig","core","totalAccounts","account","_useState5","accountType","fetchAccountsByBusiness","useCallback","listAllbusiness","then","data","businessMap","personChecking","id","legalName","firstName","lastName","totalBalance","total","forEach","b","_objectSpread","accounts","listAllAccounts","_ref2","acc","businessId","undefined","push","parseFloat","Object","values","updateAccountsByBusiness","catch","apiErrorHandler","finally","listAllCryptoAccounts","_ref3","usdBalance","useEffect","maxAccounts","useMemo","_programConfig$bank","_programConfig$bank$m","_programConfig$bank2","_programConfig$bank2$","parseInt","bank","personal","business","_unused","MiniBox","varient","showBack","bodyClass","onBack","footer","Button","width","length","Center","py","map","i","_b$accounts","paddingTop","justifyContent","marginBottom","fontWeight","display","alignItems","cursor","Icon","icon","size","marginLeft","List","slice","AccountListItem","selectedAccount","updateSelectedCryptoAccount","updateSelectedAccountDetails","updateSelectedAccountType","updateSelectedBusiness"],"sourceRoot":""}