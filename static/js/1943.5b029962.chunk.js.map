{"version":3,"file":"static/js/1943.5b029962.chunk.js","mappings":"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","sources":["webpack://drop-in-ui/./src/components/AccountListItem.module.css?b978","components/AccountListItem.tsx","views/ao/Account/List/ListByBusiness.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"AccountListItem_listItem__EP7DX\",\"tag\":\"AccountListItem_tag__Il-LV\",\"tagCash\":\"AccountListItem_tagCash__qGgKp\",\"tagCard\":\"AccountListItem_tagCard__2+Rzz\",\"tagCrypto\":\"AccountListItem_tagCrypto__KVpIj\"};","import {\n  Box, Flex, ListItem, Text\n} from '@chakra-ui/react';\nimport React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { account } from '../types/account';\nimport { cryptoAccount } from '../types/crypto';\nimport { currencyFormat, isCrypto } from '../utils/general';\nimport style from './AccountListItem.module.css';\n\ntype Props = {\n    accountDetails: account | cryptoAccount,\n    onSelect?: (a: account | cryptoAccount) => void\n}\n\nconst AccountListItem:React.FC<Props> = ({ accountDetails: a, onSelect }) => {\n  const { t } = useTranslation();\n\n  return (\n    <ListItem\n      className={`${style.listItem}`}\n      onClick={() => {\n        if (onSelect) {\n          onSelect(a);\n        }\n      }}\n    >\n      <Flex gap={4}>\n        {isCrypto(a) ? (\n          <Box className={`${style.tag} ${style.tagCrypto}`}>\n            <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.crypto')}</Text>\n          </Box>\n        ) : (\n          a.type === 'cardAccount' ? (\n            <Box className={`${style.tag} ${style.tagCard}`}>\n              <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.card')}</Text>\n            </Box>\n          ) : (\n            <Box className={`${style.tag} ${style.tagCash}`}>\n              <Text variant=\"small\" textAlign=\"center\" color=\"inherit\">{t('account_list.cash')}</Text>\n            </Box>\n          )\n        )}\n        <Box>\n          <Text variant=\"regular\" className=\"text-dark\" textAlign=\"left\">{a.label}</Text>\n          <Text variant=\"small\" textAlign=\"left\" className=\"text-light\">\n            {t('account_list.balance')}\n            : &nbsp;\n            { isCrypto(a) ? (`${a.cryptoBalance} ${a.currency}`) : currencyFormat(a.availableBalance, a.currency)}\n          </Text>\n        </Box>\n      </Flex>\n    </ListItem>\n  );\n};\n\nexport default AccountListItem;\n","import React, { useMemo } from 'react';\nimport {\n  Box, Flex, List, Text\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport MiniBox from '../../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport AccountListItem from '../../../../components/AccountListItem';\nimport { currencyFormat, isCrypto } from '../../../../utils/general';\nimport { updateSelectedAccountDetails, updateSelectedAccountType } from '../../../../store/actionCreators/account';\nimport { updateSelectedCryptoAccount } from '../../../../store/actionCreators/crypto';\n\nconst AccountListByBusiness: React.FC = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useAppAsyncDispatch();\n  const { businessId } = useParams<{businessId: string}>();\n  const business = useAppSelector((store) => store.account.accountsByBusiness, shallowEqual);\n\n  const accountsData = useMemo(() => {\n    if (business && businessId && business[businessId]) { return business[businessId]; }\n\n    return null;\n  }, [businessId, business]);\n\n  return (\n    <Box className=\"page\">\n      <MiniBox\n        varient=\"box\"\n        showBack\n        heading={t('account_list.accounts')}\n        onBack={() => {\n          navigate(-1);\n        }}\n      >\n        <Box width=\"100%\" paddingTop=\"15px\">\n          {accountsData !== null ? (\n            <>\n              <Flex justifyContent=\"space-between\" marginBottom=\"16px\">\n                <Box>\n                  <Text variant=\"regular\" fontWeight=\"500\">{accountsData.legalName}</Text>\n                  <Text variant=\"info\" fontSize=\"12px\">\n                    {accountsData.total}\n                    {' '}\n                    {t('account_list.accounts')}\n                  </Text>\n                </Box>\n                <Box>\n                  <Text fontWeight=\"500\" variant=\"regular\">\n                    {currencyFormat(accountsData.totalBalance)}\n                  </Text>\n                </Box>\n              </Flex>\n              <List>\n                {accountsData.accounts.map((a) => (\n                  <AccountListItem\n                    key={a.id}\n                    accountDetails={a}\n                    onSelect={(selectedAccount) => {\n                      if (isCrypto(selectedAccount) && businessId) {\n                        dispatch(updateSelectedAccountType('crypto'));\n                        dispatch(updateSelectedCryptoAccount(selectedAccount));\n                      } else if (!isCrypto(selectedAccount) && businessId) {\n                        dispatch(updateSelectedAccountType('cash'));\n                        dispatch(updateSelectedAccountDetails(selectedAccount));\n                      }\n\n                      setTimeout(() => {\n                        navigate(`/ao/account/details/${selectedAccount.id}`);\n                      }, 0);\n                    }}\n                  />\n                ))}\n              </List>\n            </>\n          ) : null }\n        </Box>\n      </MiniBox>\n    </Box>\n\n  );\n};\n\nexport default AccountListByBusiness;\n"],"names":["_ref","a","accountDetails","onSelect","t","useTranslation","_jsx","ListItem","className","concat","style","onClick","children","_jsxs","Flex","gap","isCrypto","Box","Text","variant","textAlign","color","type","label","cryptoBalance","currency","currencyFormat","availableBalance","navigate","useNavigate","dispatch","useAppAsyncDispatch","businessId","useParams","business","useAppSelector","store","account","accountsByBusiness","shallowEqual","accountsData","useMemo","MiniBox","varient","showBack","heading","onBack","width","paddingTop","_Fragment","justifyContent","marginBottom","fontWeight","legalName","fontSize","total","totalBalance","List","accounts","map","AccountListItem","selectedAccount","updateSelectedAccountType","updateSelectedCryptoAccount","updateSelectedAccountDetails","setTimeout","id"],"sourceRoot":""}