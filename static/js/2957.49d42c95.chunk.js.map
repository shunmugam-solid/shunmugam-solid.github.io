{"version":3,"file":"static/js/2957.49d42c95.chunk.js","mappings":"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","sources":["components/Plaid.tsx","webpack://drop-in-ui/./src/views/pullfunds/PullFrom/PullFrom.module.css?ed5a","views/pullfunds/PullFrom/PullFrom.tsx"],"sourcesContent":["import { useEffect, FunctionComponent } from 'react';\nimport {\n  usePlaidLink,\n  PlaidLinkOptions,\n  PlaidLinkOnSuccess,\n  PlaidLinkOnExit\n} from 'react-plaid-link';\n\ninterface Props {\n  token: string;\n  onSuccess: PlaidLinkOnSuccess;\n  onExit: PlaidLinkOnExit\n}\n\nconst OpenPlaidLink: FunctionComponent<Props> = ({ token, onSuccess, onExit }) => {\n  const config: PlaidLinkOptions = {\n    // When re-initializing Link after OAuth redirection, the same\n    // Link token from the first initialization must be used\n    token,\n    onSuccess,\n    // receivedRedirectUri: document.location.href, // required for OAuth\n    onExit\n    // onEvent\n  };\n\n  const { open, ready } = usePlaidLink(config);\n\n  // this opens link as soon as it's ready\n  useEffect(() => {\n    if (!ready) {\n      return;\n    }\n    // const plaidLinkIframe = document.getElementById('plaid-link-iframe-1')\n    open();\n  }, [ready, open]);\n\n  // don't render anything, just open Link\n  return null;\n};\n\nexport default OpenPlaidLink;\n","// extracted by mini-css-extract-plugin\nexport default {\"bankList\":\"PullFrom_bankList__BcX8Q\",\"pullFrom\":\"PullFrom_pullFrom__lOm6n\",\"bankInfo\":\"PullFrom_bankInfo__bgAPf\",\"removeBank\":\"PullFrom_removeBank__xdtyG\",\"linkAccount\":\"PullFrom_linkAccount__zroSx\",\"transferType\":\"PullFrom_transferType__JdFmJ\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Text, HStack, Button, Radio, RadioGroup\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport MiniBox from '../../../layout/MiniBox';\nimport Icon from '../../../components/Icon';\nimport style from './PullFrom.module.css';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport {\n  fetchPlaidToken, linkPlaidAccount, listSelfBanks, listSelfCards, removeSelfBank\n} from '../../../store/middlewares/account';\nimport { apiErrorHandler, showNotification } from '../../../utils/general';\nimport OpenPlaidLink from '../../../components/Plaid';\nimport { useDrawer } from '../../../hooks/drawer';\n\nconst PullFundsInfo = React.lazy(() => import('../PullFundsInfo/PullFundsInfo'));\nconst LinkCard = React.lazy(() => import('../LinkCard/LinkCard'));\n\n// @TODO: Needs to create seperate page for bank and card\n\n/**\n * Pull funds options page UI\n * @returns {React.ReactNode}\n */\nconst PullFrom = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const { open, close, data: drawerData } = useDrawer<{option: 'bank' | 'card'}>();\n\n  const { option = 'bank' } = drawerData || {};\n  const { selectedAccount: account, selfBankAccounts, linkedCards } = useAppSelector((store) => store.account, shallowEqual);\n\n  const [plaidToken, updatePlaidToken] = useState<string | null>(null);\n  const [selectedContact, selectContact] = useState('');\n\n  const getPlaidToken = useCallback(() => {\n    if (account) {\n      dispatch(fetchPlaidToken(account?.id))\n        .then((data) => {\n          updatePlaidToken(data.linkToken);\n        })\n        .catch(apiErrorHandler);\n    }\n  }, [account]);\n\n  const plaidOnSuccess = useCallback(\n    // eslint-disable-next-line camelcase\n    (public_token: string, metadata: any) => {\n      updatePlaidToken(null);\n      if (account?.id) {\n        dispatch(\n          linkPlaidAccount({\n            accountId: account.id,\n            plaidAccountId: metadata.accounts[0]?.id,\n            // eslint-disable-next-line camelcase\n            plaidToken: public_token,\n          })\n        ).catch(() => {\n          showNotification('An error occurred.', 'Unable to verify plaid account', 'error');\n        });\n      }\n    },\n    [account]\n  );\n\n  useEffect(() => {\n    if (account) {\n      if (option === 'bank') {\n        dispatch(listSelfBanks(account.id));\n      } else {\n        dispatch(listSelfCards(account.id));\n      }\n    }\n  }, [option, account]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading={t('pull_funds_from.title')}\n        showBack\n        footer={(\n          <Button\n            width=\"100%\"\n            variant=\"primary\"\n            disabled={selectedContact === ''}\n            onClick={() => {\n              open<{option: string, contactId: string}>(PullFundsInfo, {\n                option,\n                contactId: selectedContact\n              });\n            }}\n          >\n            {t('pull_funds_from.ctaText')}\n          </Button>\n        )}\n        onBack={() => {\n          close();\n        }}\n      >\n        <Box width=\"100%\">\n          {selfBankAccounts.length !== 0 && option === 'bank' ? (\n            <>\n              <Text variant=\"large\" className={style.pullFrom}>{t('pull_funds_from.pullFundsFrom')}</Text>\n\n              <Box className={style.bankList}>\n                <RadioGroup onChange={selectContact} value={selectedContact}>\n                  {selfBankAccounts.map((b) => (\n                    <Box key={b.id} className={style.bankInfo}>\n                      <Radio value={b.id}>\n                        <Text variant=\"regular\" className=\"text-dark\">\n                          {b.ach.bankName}\n                          {' '}\n                          XXXXXX\n                          {' '}\n                          {b.ach.accountNumber.slice(b.ach.accountNumber.length - 4)}\n                        </Text>\n                      </Radio>\n                      <Text\n                        className={style.removeBank}\n                        onClick={() => {\n                          dispatch(removeSelfBank(b.id));\n                        }}\n                      >\n                        {t('pull_funds_from.remove')}\n\n                      </Text>\n                    </Box>\n                  ))}\n                </RadioGroup>\n\n              </Box>\n\n            </>\n          ) : null }\n\n          {linkedCards.data.length !== 0 && option === 'card' ? (\n            <>\n              <Text variant=\"large\" className={style.pullFrom}>{t('pull_funds_from.pullFundsFrom')}</Text>\n\n              <Box className={style.bankList}>\n                <RadioGroup onChange={selectContact} value={selectedContact}>\n                  {linkedCards.data.map((c) => (\n                    <Box key={c.id} className={style.bankInfo}>\n                      <Radio value={c.id}>\n                        <Text variant=\"regular\" className=\"text-dark\">\n                          XXXX XXXX XXXX\n                          {' '}\n                          {c.debitCard?.last4}\n                        </Text>\n                      </Radio>\n                      <Text\n                        className={style.removeBank}\n                        onClick={() => {\n                          dispatch(removeSelfBank(c.id, 'card'));\n                        }}\n                      >\n                        {t('pull_funds_from.remove')}\n\n                      </Text>\n                    </Box>\n                  ))}\n                </RadioGroup>\n\n              </Box>\n\n            </>\n          ) : null }\n\n          <Text variant=\"large\" className={style.linkAccount}>{t(option === 'bank' ? 'pull_funds_from.linkAccount' : 'pull_funds_from.linkCard')}</Text>\n\n          <Button\n            width=\"100%\"\n            height=\"auto\"\n            variant=\"unstyled\"\n            onClick={() => {\n              if (option === 'bank') {\n                getPlaidToken();\n              } else {\n                open(LinkCard);\n              }\n            }}\n          >\n            <HStack className={style.transferType}>\n              <Box>\n                <Text variant=\"regular\">{t(option === 'bank' ? 'pull_funds_from.linkAnotherAccount' : 'pull_funds_from.linkAnotherCard')}</Text>\n              </Box>\n              <Icon icon=\"Arrow-small-right\" size={8} className=\"svg-light-grey-1\" />\n            </HStack>\n          </Button>\n\n          {plaidToken ? (\n            <OpenPlaidLink\n              token={plaidToken}\n              onSuccess={plaidOnSuccess}\n              onExit={() => {\n                updatePlaidToken(null);\n              }}\n            />\n          ) : null}\n\n        </Box>\n      </MiniBox>\n\n    </div>\n  );\n};\n\nexport default PullFrom;\n"],"names":["_ref","config","token","onSuccess","onExit","_usePlaidLink","usePlaidLink","open","ready","useEffect","PullFundsInfo","React","LinkCard","t","useTranslation","dispatch","useAppAsyncDispatch","_useDrawer","useDrawer","close","_ref$option","data","option","_useAppSelector","useAppSelector","store","account","shallowEqual","selectedAccount","selfBankAccounts","linkedCards","_useState","useState","_useState2","_slicedToArray","plaidToken","updatePlaidToken","_useState3","_useState4","selectedContact","selectContact","getPlaidToken","useCallback","fetchPlaidToken","id","then","linkToken","catch","apiErrorHandler","plaidOnSuccess","public_token","metadata","_metadata$accounts$","linkPlaidAccount","accountId","plaidAccountId","accounts","showNotification","listSelfBanks","listSelfCards","_jsx","className","children","MiniBox","heading","showBack","footer","Button","width","variant","disabled","onClick","contactId","onBack","_jsxs","Box","length","_Fragment","Text","style","RadioGroup","onChange","value","map","b","Radio","ach","bankName","accountNumber","slice","removeSelfBank","c","_c$debitCard","debitCard","last4","height","HStack","Icon","icon","size","OpenPlaidLink"],"sourceRoot":""}