{"version":3,"file":"static/js/219.244e82a9.chunk.js","mappings":"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","sources":["components/CurrencyInput.tsx","webpack://drop-in-ui/./src/views/transactions/TransactionFilter/TransactionFilter.module.css?e30c","views/transactions/TransactionFilter/TransactionFilter.tsx","views/transactions/TransactionFilter/Index.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_header\":\"TransactionFilter_filter_header__a8wBs\",\"input_picker\":\"TransactionFilter_input_picker__+ZtyG\",\"amountInputs\":\"TransactionFilter_amountInputs__PwwNL\"};","/* eslint-disable no-constant-condition */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box, Button, Text, HStack, VStack, Checkbox, FormControl, FormLabel, RadioGroup, Radio\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport DatePicker from 'react-datepicker';\nimport MiniBox from '../../../layout/MiniBox';\nimport Icon from '../../../components/Icon';\nimport style from './TransactionFilter.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport { useModuleData } from '../../../hooks/module';\nimport { Data } from '../../../modules/Transactions';\nimport CurrencyInput from '../../../components/CurrencyInput';\n\ntype filterStates = {\n  transactionType: 'credit' | 'debit' | 'card' | undefined,\n  timePeriod: 'thisWeek' | 'thisMonth' | 'lastMonth' | 'custom' | undefined,\n  amount: {\n    min: string,\n    max: string\n  },\n  startDate: Date,\n  endDate: Date\n};\n\ntype Props = {\n  showTransactionTypeFilter?: boolean,\n  showTimePeriodFilter?: boolean,\n  showAmountFilter?: boolean,\n  showCardsFilter?: boolean,\n  onApply?: (d: filterStates) => void,\n  filters?: filterStates,\n}\nconst TransactionFilter = ({\n  showTransactionTypeFilter, showTimePeriodFilter, showAmountFilter, showCardsFilter, filters, onApply\n}: Props) => {\n  const { t } = useTranslation();\n  const [showTransactionTypeData, setShowTransactionTypeData] = useState(false);\n  const [showTimePeriodData, setShowTimePeriodData] = useState(false);\n  const [showAmount, setShowAmount] = useState(false);\n  const [showCardsData, setShowCardsData] = useState(false);\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n\n  const { accountType = 'cash' } = useModuleData<Data>();\n\n  const [transactionType, setTransactionType] = useState<filterStates['transactionType']>();\n\n  const [timePeriod, setTimePeriod] = useState<filterStates['timePeriod']>();\n\n  const [cardType, setCardType] = useState({\n    physical: false,\n    virtual: true,\n  });\n\n  const [amount, setAmount] = useState<filterStates['amount']>({\n    min: '',\n    max: ''\n  });\n\n  useEffect(() => {\n    if (filters) {\n      if (filters.transactionType) {\n        setTransactionType(filters.transactionType);\n      }\n      if (filters.timePeriod) {\n        setTimePeriod(filters.timePeriod);\n      }\n      if (filters.amount) {\n        setAmount(filters.amount);\n      }\n      if (filters.startDate) {\n        setStartDate(new Date(filters.startDate));\n      }\n      if (filters.endDate) {\n        setEndDate(new Date(filters.endDate));\n      }\n    }\n  }, [filters]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading=\"Filter\"\n        showBack\n        footer={(\n          <Button\n            data-testid=\"submit-btn\"\n            width=\"100%\"\n            variant=\"primary\"\n            onClick={() => {\n              if (onApply) {\n                onApply({\n                  transactionType,\n                  timePeriod,\n                  amount,\n                  startDate,\n                  endDate\n                });\n              }\n            }}\n          >\n            {t('filter.ctaText')}\n          </Button>\n)}\n      >\n        <Box>\n\n          {/* Filter type */}\n          {showTransactionTypeFilter ? (\n            <Box data-testid=\"transaction-type-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowTransactionTypeData(!showTransactionTypeData)}>\n                <Text variant=\"large\">{t('filter.transactionType')}</Text>\n                {showTransactionTypeData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showTransactionTypeData ? (\n                  <RadioGroup onChange={(v:'card' | 'credit' | 'debit') => v && setTransactionType(v)} value={transactionType}>\n                    <VStack alignItems=\"flex-start\" pb=\"20px\">\n                      <Radio value=\"credit\" variant=\"primary\">\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.credits')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" value=\"debit\">\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.debits')}</Text>\n                      </Radio>\n                      {accountType === 'cash'\n                        ? (\n                          <Radio variant=\"primary\" value=\"card\">\n                            <Text variant=\"regular\" className=\"text-dark\">{t('filter.cardTransactions')}</Text>\n                          </Radio>\n                        ) : null }\n                    </VStack>\n                  </RadioGroup>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Time Period */}\n          {showTimePeriodFilter ? (\n            <Box data-testid=\"date-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowTimePeriodData(!showTimePeriodData)}>\n                <Text variant=\"large\">{t('filter.timePeriod')}</Text>\n                {showTimePeriodData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showTimePeriodData ? (\n                  <RadioGroup>\n                    <VStack alignItems=\"flex-start\" pb=\"20px\">\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'thisWeek' ? undefined : 'thisWeek')} isChecked={timePeriod === 'thisWeek'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.thisWeek')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'thisMonth' ? undefined : 'thisMonth')} isChecked={timePeriod === 'thisMonth'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.thisMonth')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'lastMonth' ? undefined : 'lastMonth')} isChecked={timePeriod === 'lastMonth'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.lastMonth')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'custom' ? undefined : 'custom')} isChecked={timePeriod === 'custom'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.custom')}</Text>\n                      </Radio>\n                      {timePeriod === 'custom'\n                        ? (\n                          <HStack pt=\"20px\">\n                            <FormControl variant=\"primary\">\n                              <FormLabel variant=\"primary\">\n                                {t('filter.from')}\n                              </FormLabel>\n                              <DatePicker className={style.input_picker} selected={startDate} onChange={(date:Date) => setStartDate(date)} placeholderText={t('filter.startDate')} />\n                            </FormControl>\n                            <FormControl variant=\"primary\">\n                              <FormLabel variant=\"primary\">\n                                {t('filter.to')}\n                              </FormLabel>\n                              <DatePicker className={style.input_picker} selected={endDate} onChange={(date:Date) => setEndDate(date)} placeholderText={t('filter.endDate')} />\n                            </FormControl>\n                          </HStack>\n                        ) : null }\n                    </VStack>\n                  </RadioGroup>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Amount */}\n          {showAmountFilter ? (\n            <Box data-testid=\"amount-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowAmount(!showAmount)}>\n                <Text variant=\"large\">{t('filter.amount')}</Text>\n                {showAmount ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showAmount ? (\n                  <HStack className={style.amountInputs}>\n                    <FormControl variant=\"primary\">\n                      <FormLabel variant=\"primary\">\n                        {t('filter.from')}\n                      </FormLabel>\n                      <CurrencyInput\n                        value={amount.min}\n                        onChange={(value) => setAmount({\n                          ...amount,\n                          min: value || ''\n                        })}\n                      />\n                    </FormControl>\n                    <FormControl variant=\"primary\">\n                      <FormLabel variant=\"primary\">\n                        {t('filter.to')}\n                      </FormLabel>\n                      <CurrencyInput\n                        value={amount.max}\n                        onChange={(value) => setAmount({\n                          ...amount,\n                          max: value || ''\n                        })}\n                      />\n                    </FormControl>\n                  </HStack>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Cards */}\n          {showCardsFilter && false ? (\n            <Box>\n              <HStack className={style.filter_header} onClick={() => setShowCardsData(!showCardsData)}>\n                <Text variant=\"large\">{t('filter.cards')}</Text>\n                {showCardsData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showCardsData ? (\n                  <VStack alignItems=\"flex-start\" pb=\"20px\">\n                    <Checkbox onChange={() => setCardType({ ...cardType, physical: !cardType.physical })} isChecked={cardType.physical}>\n                      <Text variant=\"regular\">{t('filter.physical')}</Text>\n                    </Checkbox>\n                    <Checkbox onChange={() => setCardType({ ...cardType, virtual: !cardType.virtual })} isChecked={cardType.virtual}>\n                      <Text variant=\"regular\">{t('filter.virtual')}</Text>\n                    </Checkbox>\n                  </VStack>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default TransactionFilter;\n","import React, { useMemo } from 'react';\nimport { shallowEqual } from 'react-redux';\nimport {\n  startOfWeek, endOfWeek, startOfMonth, endOfMonth, format\n} from 'date-fns';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { updateTransactionFilter } from '../../../store/actionCreators/transaction';\nimport TransactionFilter from './TransactionFilter';\nimport { filterData } from '../../../types/transaction';\nimport { useModuleConfig } from '../../../hooks/module';\nimport { useDrawer } from '../../../hooks/drawer';\nimport { eventEmitter, Events } from '../../../utils/events';\n\nconst Filter = () => {\n  const {\n    showAmountFilter, showCardsFilter, showTimePeriodFilter, showTransactionTypeFilter\n  } = useModuleConfig('transactions');\n\n  const tmpFilters = useAppSelector((store) => store.transaction.filters.tmpStates, shallowEqual);\n  const dispatch = useAppAsyncDispatch();\n  const { close } = useDrawer();\n\n  const filtersData = useMemo(() => {\n    const filterOptions: filterData & {timePeriod?: string} = {};\n    const filterObject: any = {\n      ...tmpFilters\n    };\n    if (filterOptions.txnType === 'credit' || filterOptions.txnType === 'debit' || filterOptions.txnType === 'card') {\n      filterObject.transactionType = filterOptions.txnType;\n    }\n    // if (filterOptions.transferType === 'card') {\n    //   filterObject.transactionType.cardTransactions = true;\n    // }\n    if (filterOptions.startDate) { filterObject.startDate = filterOptions.startDate; }\n    if (filterOptions.endDate) { filterObject.endDate = filterOptions.endDate; }\n    if (filterOptions.timePeriod) { filterObject.timePeriod = filterOptions.timePeriod; }\n    if (filterOptions.minAmount) { filterObject.amount.min = filterOptions.minAmount; }\n    if (filterOptions.maxAmount) { filterObject.amount.max = filterOptions.maxAmount; }\n    return filterObject;\n  }, [tmpFilters]);\n\n  return (\n    <TransactionFilter\n      showAmountFilter={showAmountFilter}\n      showCardsFilter={showCardsFilter}\n      showTimePeriodFilter={showTimePeriodFilter}\n      showTransactionTypeFilter={showTransactionTypeFilter}\n      filters={filtersData}\n      onApply={({\n        transactionType, amount, timePeriod, startDate, endDate\n      }) => {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const filters:filterData = {};\n        // transactionType\n        if (transactionType === 'credit' || transactionType === 'debit' || transactionType === 'card') {\n          filters.txnType = transactionType;\n        }\n        // else if (transactionType === 'card') {\n        //   filters.transferType = 'card';\n        // }\n\n        // date\n        const today = new Date();\n        const lastday = new Date(today.getFullYear(), today.getMonth(), 0);\n        switch (timePeriod) {\n          case 'thisWeek':\n            filters.startDate = format(startOfWeek(today), 'yyyy-MM-dd');\n            filters.endDate = format(endOfWeek(today), 'yyyy-MM-dd');\n            break;\n          case 'thisMonth':\n            filters.startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n            filters.endDate = format(endOfMonth(today), 'yyyy-MM-dd');\n            break;\n          case 'lastMonth':\n            filters.startDate = format(startOfMonth(lastday), 'yyyy-MM-dd');\n            filters.endDate = format(endOfMonth(lastday), 'yyyy-MM-dd');\n            break;\n          case 'custom':\n            filters.startDate = format(startDate, 'yyyy-MM-dd');\n            filters.endDate = format(endDate, 'yyyy-MM-dd');\n            break;\n          default:\n            break;\n        }\n\n        // amount\n        if (amount.min !== '') {\n          filters.minAmount = amount.min;\n        }\n        if (amount.max !== '') {\n          filters.maxAmount = amount.max;\n        }\n\n        dispatch(updateTransactionFilter({\n          data: filters,\n          tmpStates: {\n            transactionType, amount, timePeriod, startDate, endDate\n          }\n        }));\n\n        eventEmitter.dispatch(Events.TRANSACTION_REFRESH, {\n          data: filters,\n          tmpStates: {\n            transactionType, amount, timePeriod, startDate, endDate\n          }\n        });\n\n        close();\n      }}\n    />\n  );\n};\n\nexport default Filter;\n"],"names":["_ref","onChange","value","placeholder","prefix","digits","input","useRef","useLayoutEffect","current","Inputmask","autoUnmask","allowMinus","rightAlign","numericInput","mask","_jsx","Input","variant","ref","e","v","target","showTransactionTypeFilter","showTimePeriodFilter","showAmountFilter","filters","showCardsFilter","onApply","t","useTranslation","_useState","useState","_useState2","_slicedToArray","showTransactionTypeData","setShowTransactionTypeData","_useState3","_useState4","showTimePeriodData","setShowTimePeriodData","_useState5","_useState6","showAmount","setShowAmount","_useState7","_useState8","_useState9","Date","_useState10","startDate","setStartDate","_useState11","_useState12","endDate","setEndDate","_useModuleData$accoun","useModuleData","accountType","_useState13","_useState14","transactionType","setTransactionType","_useState15","_useState16","timePeriod","setTimePeriod","_useState17","physical","virtual","_useState18","_useState19","min","max","_useState20","amount","setAmount","useEffect","className","children","MiniBox","heading","showBack","footer","Button","width","onClick","_jsxs","Box","HStack","style","Text","Icon","icon","size","borderBottom","RadioGroup","VStack","alignItems","pb","Radio","undefined","isChecked","pt","FormControl","FormLabel","DatePicker","selected","date","placeholderText","CurrencyInput","_objectSpread","_useModuleConfig","useModuleConfig","tmpFilters","useAppSelector","store","transaction","tmpStates","shallowEqual","dispatch","useAppAsyncDispatch","close","useDrawer","filtersData","useMemo","filterOptions","filterObject","txnType","minAmount","maxAmount","TransactionFilter","today","lastday","getFullYear","getMonth","format","startOfWeek","endOfWeek","startOfMonth","endOfMonth","updateTransactionFilter","data","eventEmitter","Events","TRANSACTION_REFRESH"],"sourceRoot":""}