{"version":3,"file":"static/js/5808.9fc6ac6a.chunk.js","mappings":"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","sources":["webpack://drop-in-ui/./src/components/ConfirmModal/ConfirmModal.module.css?7833","components/ConfirmModal/ConfirmModal.tsx","components/SentCard.tsx","views/cards/SentCardList/SentCardList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modal\":\"ConfirmModal_modal__fS-v4\",\"modalHeader\":\"ConfirmModal_modalHeader__M3BcQ\",\"modalBody\":\"ConfirmModal_modalBody__uHbgc\",\"modalClose\":\"ConfirmModal_modalClose__Xh2Cs\"};","import React from 'react';\nimport {\n  Text, Button, Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, ModalFooter, ModalCloseButton\n} from '@chakra-ui/react';\n\nimport style from './ConfirmModal.module.css';\n\ninterface Props {\n  showModal: boolean,\n  title: string,\n  description: string,\n  cancelButton?: string,\n  submitButton?: string,\n  onCancel?: (arg: any) => void;\n  onOk?:() => void;\n}\n\nconst ConfirmModal = ({\n  title, description, cancelButton, submitButton, showModal, onCancel, onOk\n}: Props) => (\n  <Modal isOpen={showModal} size=\"sm\" isCentered onClose={() => onCancel}>\n    <ModalOverlay />\n    <ModalContent className={`${style.modal}`}>\n      <ModalHeader className={`${style.modalHeader}`}>{title}</ModalHeader>\n      <ModalCloseButton onClick={onCancel} className={`${style.modalClose}`} />\n      <ModalBody className={`${style.modalBody}`}>\n        <Text>{description}</Text>\n      </ModalBody>\n\n      <ModalFooter>\n        <Button colorScheme=\"branding\" variant=\"outline\" mr={3} onClick={onCancel}>\n          {cancelButton || 'Cancel'}\n        </Button>\n        <Button onClick={onOk} variant=\"primary\">{submitButton || 'Submit'}</Button>\n      </ModalFooter>\n    </ModalContent>\n  </Modal>\n);\n\nexport default ConfirmModal;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, HStack, Text, Image, Button\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport style from './Card.module.css';\nimport { useAppAsyncDispatch, useAppSelector } from '../hooks/store';\nimport ConfirmModal from './ConfirmModal/ConfirmModal';\nimport { sentCardDelete } from '../store/middlewares/card';\nimport { apiErrorHandler, showNotification } from '../utils/general';\nimport CardImg from '../assets/images/cards/card-dummy.svg';\n\ntype Props = {\n    data: any,\n    onRefresh: () => void;\n}\n\nconst SentCard:React.FC<Props> = React.memo(({ data, onRefresh }) => {\n  const c = data;\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const [showModal, setShowModal] = useState(false);\n\n  const programConfig = useAppSelector((store) => store.core.programConfig, shallowEqual);\n  const cardImg = useMemo(() => programConfig?.brand.cardArtVirtual, [c, programConfig]);\n\n  const deleteCard = useCallback(() => {\n    dispatch(sentCardDelete(c.id))\n      .then(() => {\n        setShowModal(false);\n        showNotification('Success', 'Sent card successfully cancelled', 'success');\n        onRefresh();\n      })\n      .catch(apiErrorHandler);\n  }, [sentCardDelete, showNotification, apiErrorHandler]);\n\n  return (\n    <Box className={`${style.card_image_info} ${style.cardList__card_image_info_white} ${style.sent_card} ${c.cardStatus !== 'active' ? style.is_cancelled : ''}`}>\n      <Image className={style.card_image} alt=\"logo\" src={cardImg} fallbackSrc={CardImg} data-testid=\"card-img\" />\n      <Box className={style.card_details}>\n        {/* <Text color=\"#000\" fontWeight=\"700\" fontSize=\"10px\">BUSINESS DEBIT</Text> */}\n        <Box pt=\"14px\" pb=\"18px\" mb=\"auto\">\n          <Text color=\"#ffffff\" fontWeight=\"500\" fontSize=\"10px\">{t('cards_list.virtual')}</Text>\n          <Text color=\"#A1A1A1\" fontSize=\"10px\">\n            &#36;\n            {' '}\n            {c.availableLimit}\n          </Text>\n        </Box>\n        <Text color=\"#ffffff\" fontWeight=\"700\" fontSize=\"15px\" pb=\"8px\">\n          **** **** ****\n          {' '}\n          {c.last4}\n        </Text>\n        <HStack>\n          <Box alignItems=\"flex-start\" mr=\"40px\">\n            <Text color=\"#A1A1A1\" fontSize=\"10px\">{t('cards_list.expDate')}</Text>\n            <Text color=\"#ffffff\" fontSize=\"13px\">\n              {c.expiryMonth}\n              /\n              {c.expiryYear}\n            </Text>\n          </Box>\n          <Box alignItems=\"flex-start\">\n            <Text color=\"#A1A1A1\" fontSize=\"10px\">{t('cards_list.cvv')}</Text>\n            <Text color=\"#ffffff\" fontSize=\"13px\">\n              {c.expiryYear}\n            </Text>\n          </Box>\n        </HStack>\n        <Box mt=\"auto\">\n          <Text color=\"#ffffff\" fontWeight=\"700\" fontSize=\"9px\">\n            {c.label}\n          </Text>\n        </Box>\n      </Box>\n      {\n        c.cardStatus === 'active' && (\n        <>\n          <Box pt=\"14px\" pb=\"18px\" className={style.cancel_card}>\n            <Button width=\"100%\" variant=\"primar\" onClick={() => { setShowModal(true); }}>\n              { t('cards_list.cancelCard') }\n            </Button>\n          </Box>\n          <ConfirmModal\n            showModal={showModal}\n            title=\"Cancel card\"\n            description=\"This cannot be undone.\"\n            cancelButton=\"No\"\n            submitButton=\"Yes\"\n            onCancel={() => { setShowModal(false); }}\n            onOk={deleteCard}\n          />\n        </>\n        )\n      }\n    </Box>\n  );\n});\n\nexport default SentCard;\n","import React, {\n  useCallback, useEffect, useRef, useState\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Text, Center, Heading, Input, HStack\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport Icon from '../../../components/Icon';\nimport style from '../CardList/CardList.module.css';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { listAllSentCards } from '../../../store/middlewares/card';\nimport { apiErrorHandler, preloadImage } from '../../../utils/general';\nimport SentCard from '../../../components/SentCard';\nimport { useModulePageData } from '../../../hooks/module';\nimport { getbusinessById } from '../../../store/middlewares/business';\nimport { updateSelectedBusiness } from '../../../store/actionCreators/business';\nimport { useDebouncedEffect } from '../../../hooks/app';\nimport { addMethod, sendMessage } from '../../../utils/sdk';\nimport SkeletonLoader from '../../../components/SkeletonLoader';\nimport { SentCardData } from '../../../modules/Cards/SentCard';\nimport { Data } from '../../../modules/Cards';\nimport { CARD, COMMON } from '../../../const/messages';\nimport Loader from '../../../components/Loader';\n\n/**\n * SentCard list\n * @returns {JSX.Element}\n */\nconst SentCardList = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const page = useRef(1);\n\n  const isSeachChanged = useRef(false);\n  const [searchKeyword, updateSearch] = useState('');\n  const { sentCards, cardLoading } = useAppSelector((store) => store.card, shallowEqual);\n  const account = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const business = useAppSelector((store) => store.business.selectedBusiness, shallowEqual);\n\n  const [cards, updateCards] = useState(sentCards.data);\n\n  const {\n    showSearch = true, showAddCard = true, cardsPerView = 20, pagination = true, showExtendedDetails = true, showCompactView = false\n  } = useModulePageData<SentCardData, Data<'sentCard'>['startScreen']>('sentCard');\n\n  const programConfig = useAppSelector((store) => store.core.programConfig, shallowEqual);\n\n  const getSentCards = useCallback(() => {\n    if (account) {\n      dispatch(listAllSentCards(account.id, cardsPerView, (page.current - 1) * cardsPerView, searchKeyword.length === 0 ? undefined : searchKeyword))\n        .then((res) => {\n          if (res.total === 0 && searchKeyword.length === 0) {\n            sendMessage(COMMON.NO_DATA, {\n              from: 'sentCard'\n            });\n          }\n          updateCards(res.data);\n        })\n        .catch(apiErrorHandler);\n    }\n  }, [account, cardsPerView, page, searchKeyword]);\n\n  useEffect(() => {\n    if (account && account.businessId !== '' && !business) {\n      dispatch(getbusinessById(account.businessId))\n        .then((b) => dispatch(updateSelectedBusiness(b)));\n    }\n  }, [account, business]);\n\n  const reloadCardList = useCallback(() => {\n    /*\n    page.current = 1;\n    getSentCards();\n    */\n    // TODO: Temprory hack\n    if (searchKeyword && searchKeyword.length !== 0) {\n      const filteredCards = sentCards.data.filter((c) => c.card.last4.includes(searchKeyword));\n      updateCards(filteredCards);\n    } else {\n      updateCards(sentCards.data);\n    }\n  }, [getSentCards, page, sentCards, searchKeyword]);\n\n  useEffect(() => {\n    // preload art images\n    preloadImage(programConfig?.brand.cardArtVirtual);\n    getSentCards();\n\n    addMethod('sendCardListRefresh', () => new Promise((resolve) => {\n      page.current = 1;\n      getSentCards();\n      resolve(true);\n    }));\n  }, [account]);\n\n  useDebouncedEffect(() => {\n    if (isSeachChanged.current) {\n      reloadCardList();\n    }\n  }, 1000, [isSeachChanged, reloadCardList]);\n\n  const addSentCardDOM = (isHorizontal = false) => (\n    <Box\n      className={`${style.cardList__add_container} default-bg ${isHorizontal ? style.cardList__add_container_horizontal : ''}`}\n      maxW={cards.length === 0 ? '320px' : 'none'}\n      onClick={() => {\n        sendMessage(CARD.ADD_SEND_CARD_PRESSED);\n      }}\n    >\n      <Center className={style.cardList__add}>\n        <Icon icon=\"icon-add\" className=\"icon-customizable\" size={40} />\n        <Text variant=\"regular\" pt=\"10px\">{t('cards_list.addAVisaCard')}</Text>\n      </Center>\n    </Box>\n  );\n\n  const cardList = (isHorizontal = false) => (\n    <Box className={style.autoCardHeight}>\n      {showAddCard && showCompactView\n        ? addSentCardDOM(isHorizontal) : null }\n      {cards.map((c) => (\n        <Box\n          border={showExtendedDetails ? '1px solid var(--border-color-1)' : 'none'}\n          key={c.card.id}\n          className={style.cardList__card_container}\n        >\n          <SentCard data={c.card} onRefresh={reloadCardList} />\n        </Box>\n      ))}\n    </Box>\n  );\n\n  return (\n    <Center className=\"page\" height=\"100%\">\n      {cardLoading && page.current === 1 && !isSeachChanged.current\n        ? (\n          <SkeletonLoader name=\"CardList\" showHeader={!showCompactView} />\n        )\n        : (\n          <Box width=\"100%\" flexDirection=\"column\" height=\"100%\" display=\"flex\">\n            <Box p=\"15px\">\n              <HStack width=\"100%\" justifyContent=\"space-between\" mb=\"16px\">\n                {/* Heading */}\n                <Heading variant=\"navTitle\" mr=\"auto\">{t('cards_list.sentCards')}</Heading>\n              </HStack>\n              {\n        showSearch ? (\n          <HStack mt=\"16px\">\n            {/* Input and search */}\n            <Box className={style.cardList__search}>\n              <Icon icon=\"icon-search\" className={style.cardList__search__icon} size={18} />\n              <Input\n                placeholder={t('cards_list.searchCards')}\n                variant=\"primary\"\n                className={style.cardList__search__input}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  isSeachChanged.current = true;\n                  updateSearch(e.target.value);\n                }}\n                value={searchKeyword}\n              />\n            </Box>\n\n            {showAddCard && showSearch && !showCompactView ? (\n              <Center\n                className={`${style.contactAddContainer} button-icon-bg`}\n                onClick={() => {\n                  sendMessage(CARD.ADD_SEND_CARD_PRESSED);\n                }}\n              >\n                <Icon className=\"dark-color\" icon=\"icon-plus\" size={16} />\n                <Text className={`${style.contactAddTxt} dark-color`}>\n                  {t('select_contact.add')}\n                </Text>\n              </Center>\n            ) : null}\n          </HStack>\n        ) : null\n      }\n            </Box>\n\n            {/* Cards */}\n            {cardLoading && isSeachChanged.current ? <SkeletonLoader name=\"CardList\" showHeader={false} />\n              : (\n                <div\n                  className={style.scrollableDiv}\n                  id=\"scrollableDiv\"\n                >\n                  <InfiniteScroll\n                    dataLength={cards.length}\n                    next={() => {\n                      page.current += 1;\n                      getSentCards();\n                    }}\n                    hasMore={pagination && sentCards.data.length < sentCards.total && sentCards.total !== 0}\n                    loader={<Center my={3}><Loader showModal={false} show /></Center>}\n                    endMessage={(\n            cardLoading ? null\n              : (\n                <Center py={2}>\n                  <Text variant=\"regular\" className=\"text-light\" textAlign=\"center\">\n                    {t(sentCards.total === 0 ? (showAddCard && showCompactView ? '' : 'cards_list.noData') : 'cards_list.noMoreCards')}\n                  </Text>\n                </Center>\n              )\n          )}\n                    scrollableTarget=\"scrollableDiv\"\n                  >\n                    {cardList()}\n                  </InfiniteScroll>\n                </div>\n              )}\n          </Box>\n        )}\n\n    </Center>\n  );\n};\n\nexport default SentCardList;\n"],"names":["_ref","title","description","cancelButton","submitButton","showModal","onCancel","onOk","_jsxs","Modal","isOpen","size","isCentered","onClose","children","_jsx","ModalOverlay","ModalContent","className","concat","style","ModalHeader","ModalCloseButton","onClick","ModalBody","Text","ModalFooter","Button","colorScheme","variant","mr","React","data","onRefresh","c","t","useTranslation","dispatch","useAppAsyncDispatch","_useState","useState","_useState2","_slicedToArray","setShowModal","programConfig","useAppSelector","store","core","shallowEqual","cardImg","useMemo","brand","cardArtVirtual","deleteCard","useCallback","sentCardDelete","id","then","showNotification","catch","apiErrorHandler","Box","card_image_info","cardList__card_image_info_white","sent_card","cardStatus","is_cancelled","Image","card_image","alt","src","fallbackSrc","CardImg","card_details","pt","pb","mb","color","fontWeight","fontSize","availableLimit","last4","HStack","alignItems","expiryMonth","expiryYear","mt","label","_Fragment","cancel_card","width","ConfirmModal","page","useRef","isSeachChanged","searchKeyword","updateSearch","_useAppSelector","card","sentCards","cardLoading","account","selectedAccount","business","selectedBusiness","_useState3","_useState4","cards","updateCards","_useModulePageData","useModulePageData","_useModulePageData$sh","showSearch","_useModulePageData$sh2","showAddCard","_useModulePageData$ca","cardsPerView","_useModulePageData$pa","pagination","_useModulePageData$sh3","showExtendedDetails","_useModulePageData$sh4","showCompactView","getSentCards","listAllSentCards","current","length","undefined","res","total","sendMessage","COMMON","NO_DATA","from","useEffect","businessId","getbusinessById","b","updateSelectedBusiness","reloadCardList","filteredCards","filter","includes","preloadImage","addMethod","Promise","resolve","useDebouncedEffect","addSentCardDOM","isHorizontal","arguments","cardList__add_container","cardList__add_container_horizontal","maxW","CARD","ADD_SEND_CARD_PRESSED","Center","cardList__add","Icon","icon","height","SkeletonLoader","name","showHeader","flexDirection","display","p","justifyContent","Heading","cardList__search","cardList__search__icon","Input","placeholder","cardList__search__input","onChange","e","target","value","contactAddContainer","contactAddTxt","scrollableDiv","InfiniteScroll","dataLength","next","hasMore","loader","my","Loader","show","endMessage","py","textAlign","scrollableTarget","autoCardHeight","map","border","cardList__card_container","SentCard","cardList"],"sourceRoot":""}