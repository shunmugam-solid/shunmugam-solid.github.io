{"version":3,"file":"static/js/9730.d0c4cbf6.chunk.js","mappings":"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","sources":["components/CurrencyInput.tsx","store/actionCreators/payment.ts","store/middlewares/payment.ts","views/payments/SendCard/SendCard.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","/* eslint-disable import/prefer-default-export */\nimport { actionCreator } from '..';\nimport { paymentResponse } from '../../types/payment';\nimport { UPDATE_PAYMENT_RESPONSE } from '../actionTypes/payment';\n\n/**\n * update core state\n * @param {*} payload\n * @returns {Action<string, any>}\n */\nexport const updatePaymentResponse: actionCreator<paymentResponse> = (payload) => ({\n  type: UPDATE_PAYMENT_RESPONSE,\n  payload\n});\n","import http from '../../utils/http';\nimport { loading } from '../../utils/general';\nimport { AsyncAppAction } from '..';\nimport { updatePaymentResponse } from '../actionCreators/payment';\nimport { paymentResponse } from '../../types/payment';\n\n/**\n * intrabank\n * @param payload\n * @returns\n */\nexport const intrabankPay = (payload: {\n    accountId: string,\n    contactId: string,\n    amount: string,\n    description: string\n  }): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n  /* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/intrabank', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const achPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/ach', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * wire\n * @param payload\n * @returns\n */\nexport const wirePay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'domestic' | 'international'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/wire', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * send a card\n * @param payload\n * @returns\n */\nexport const sendCardPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'virtual'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/card', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const checkPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  type: 'physical',\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/check', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n","import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, Button, FormControl, FormLabel, Input, useStyleConfig\n} from '@chakra-ui/react';\nimport PhoneInput, { isPossiblePhoneNumber } from 'react-phone-number-input';\nimport 'react-phone-number-input/style.css';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { sendCardPay } from '../../../store/middlewares/payment';\nimport { updateContact } from '../../../store/middlewares/contact';\nimport { apiErrorHandler } from '../../../utils/general';\nimport AddressSearch from '../../../components/AddressSearch';\nimport { useModuleData, useModulePageData } from '../../../hooks/module';\nimport { sendMessage } from '../../../utils/sdk';\nimport { Data } from '../../../modules/Payments';\nimport { SendCardData } from '../../../modules/Payments/SendCard';\nimport { COMMON } from '../../../const/messages';\nimport CurrencyInput from '../../../components/CurrencyInput';\n\nconst SendCard:React.FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const navigate = useNavigate();\n  const inputStyle:any = useStyleConfig('Input', {\n    variant: 'primary'\n  });\n\n  const {\n    gmapKey = '',\n    startScreen = 'options',\n  } = useModuleData<Data<'sendCard'>>();\n\n  const { showBack } = useModulePageData<SendCardData, Data<'sendCard'>['startScreen']>('sendCard');\n\n  const accountDetails = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const contactDetails = useAppSelector((store) => store.contact.selectedContact, shallowEqual);\n  const [localContactDetails, updateContactData] = useState({\n    name: contactDetails?.name || '',\n    email: contactDetails?.email || '',\n    phone: contactDetails?.phone || '',\n    address: contactDetails?.card?.address || {\n      line1: '',\n      line2: '',\n      city: '',\n      state: '',\n      country: 'US',\n      postalCode: '',\n      addressType: 'card',\n    }\n  });\n\n  const [paymentData, updatePaymentData] = useState({\n    amount: '',\n    description: '',\n    contactId: contactDetails?.id || '',\n    accountId: accountDetails?.id || '',\n  });\n\n  const isValid = useMemo(() => localContactDetails.name.length !== 0\n  && localContactDetails.email.length !== 0\n  && isPossiblePhoneNumber(localContactDetails.phone)\n  && paymentData.amount.length !== 0\n  && parseFloat(paymentData.amount) >= 0.01\n  && paymentData.description.length !== 0\n  && !!localContactDetails.address\n  && !!localContactDetails.address.line1\n  && !!localContactDetails.address.city\n  && !!localContactDetails.address.state\n  && !!localContactDetails.address.country\n  && !!localContactDetails.address.postalCode\n  && localContactDetails.address.line1.length !== 0\n  && localContactDetails.address.city.length !== 0\n  && localContactDetails.address.state.length !== 0\n  && localContactDetails.address.country.length !== 0\n  && localContactDetails.address.postalCode.length !== 0, [localContactDetails, paymentData]);\n\n  const onSubmit = useCallback(() => {\n    if (contactDetails?.id && isValid) {\n      dispatch(updateContact(contactDetails.id, {\n        accountId: contactDetails.accountId,\n        name: localContactDetails.name,\n        email: localContactDetails.email,\n        phone: localContactDetails.phone,\n        card: {\n          address: {\n            ...localContactDetails.address,\n            addressType: 'card',\n            country: 'US',\n          },\n        }\n      })).then(() => {\n        dispatch(sendCardPay({\n          ...paymentData,\n          type: 'virtual'\n        }))\n          .then(() => {\n            navigate('/payments/success');\n          }).catch(apiErrorHandler);\n      }).catch(apiErrorHandler);\n    }\n  }, [isValid, paymentData, localContactDetails]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading={t('payments_send_card.title')}\n        footer={(\n          <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={onSubmit}>\n            {t('payments_send_card.ctaText')}\n          </Button>\n        )}\n        showBack={startScreen !== 'sendCard' || showBack}\n        onBack={() => {\n          sendMessage(COMMON.BACK_PRESSED, { from: 'sendCard' });\n          if (startScreen !== 'sendCard') {\n            navigate(-1);\n          }\n        }}\n      >\n        <Box width=\"100%\" paddingTop=\"15px\">\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.name')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={localContactDetails?.name || ''}\n              onChange={(e) => {\n                updateContactData({\n                  ...localContactDetails,\n                  name: e.target.value\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.email')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={localContactDetails.email}\n              onChange={(e) => {\n                updateContactData({\n                  ...localContactDetails,\n                  email: e.target.value\n\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.phone')}\n            </FormLabel>\n            <PhoneInput\n              data-testid=\"mobileInput\"\n              style={inputStyle.field}\n              className=\"country-input\"\n              international\n              limitMaxLength\n              value={localContactDetails.phone}\n              defaultCountry=\"US\"\n              countryCallingCodeEditable={false}\n              onChange={(v:any) => {\n                updateContactData({\n                  ...localContactDetails,\n                  phone: v || ''\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.address1')}\n            </FormLabel>\n            <AddressSearch\n              restrictedCountry=\"US\"\n              placeholder={t('payments_send_card.address1')}\n              googleApiKey={gmapKey}\n              address={localContactDetails?.address || undefined}\n              onChange={(address) => {\n                updateContactData({\n                  ...localContactDetails,\n                  address: {\n                    ...localContactDetails.address,\n                    ...address,\n                  }\n                });\n              }}\n            />\n            {/* <Input variant=\"primary\" value=\"\" /> */}\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.address2')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              placeholder={t('payments_send_card.address2')}\n              value={localContactDetails?.address?.line2}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateContactData({\n                  ...localContactDetails,\n                  address: {\n                    ...localContactDetails.address,\n                    line2: e.target.value,\n                  }\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.addressCity')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              placeholder={t('payments_send_card.addressCity')}\n              value={localContactDetails?.address?.city}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateContactData({\n                  ...localContactDetails,\n                  address: {\n                    ...localContactDetails.address,\n                    city: e.target.value,\n                  }\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.addressState')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              placeholder={t('payments_send_card.addressState')}\n              value={localContactDetails?.address?.state}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateContactData({\n                  ...localContactDetails,\n                  address: {\n                    ...localContactDetails.address,\n                    state: e.target.value,\n                  }\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.addressZipcode')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              placeholder={t('payments_send_card.addressZipcode')}\n              value={localContactDetails?.address?.postalCode}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                updateContactData({\n                  ...localContactDetails,\n                  address: {\n                    ...localContactDetails.address,\n                    postalCode: e.target.value,\n                  }\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.amount')}\n            </FormLabel>\n            <CurrencyInput\n              value={paymentData.amount}\n              onChange={(value) => {\n                updatePaymentData({\n                  ...paymentData,\n                  amount: value || ''\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_send_card.purpose')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={paymentData.description}\n              onChange={(e) => {\n                updatePaymentData({\n                  ...paymentData,\n                  description: e.target.value\n                });\n              }}\n            />\n          </FormControl>\n\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default SendCard;\n"],"names":["_ref","onChange","value","placeholder","prefix","digits","input","useRef","useLayoutEffect","current","Inputmask","autoUnmask","allowMinus","rightAlign","numericInput","mask","_jsx","Input","variant","ref","e","v","target","updatePaymentResponse","payload","type","UPDATE_PAYMENT_RESPONSE","intrabankPay","dispatch","Promise","resolve","reject","loading","http","post","then","data","catch","finally","achPay","_ref2","wirePay","_ref3","sendCardPay","_ref4","checkPay","_ref5","_contactDetails$card","_localContactDetails$","_localContactDetails$2","_localContactDetails$3","_localContactDetails$4","t","useTranslation","useAppAsyncDispatch","navigate","useNavigate","inputStyle","useStyleConfig","_useModuleData","useModuleData","_useModuleData$gmapKe","gmapKey","_useModuleData$startS","startScreen","showBack","useModulePageData","accountDetails","useAppSelector","store","account","selectedAccount","shallowEqual","contactDetails","contact","selectedContact","_useState","useState","name","email","phone","address","card","line1","line2","city","state","country","postalCode","addressType","_useState2","_slicedToArray","localContactDetails","updateContactData","_useState3","amount","description","contactId","id","accountId","_useState4","paymentData","updatePaymentData","isValid","useMemo","length","isPossiblePhoneNumber","parseFloat","onSubmit","useCallback","updateContact","_objectSpread","apiErrorHandler","className","children","MiniBox","heading","footer","Button","width","disabled","onClick","onBack","sendMessage","COMMON","BACK_PRESSED","from","_jsxs","Box","paddingTop","FormControl","FormLabel","PhoneInput","style","field","international","limitMaxLength","defaultCountry","countryCallingCodeEditable","AddressSearch","restrictedCountry","googleApiKey","undefined","CurrencyInput"],"sourceRoot":""}