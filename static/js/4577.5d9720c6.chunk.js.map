{"version":3,"file":"static/js/4577.5d9720c6.chunk.js","mappings":"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","sources":["components/DatePicker.tsx","components/SsnInput.tsx","store/actionCreators/business.ts","views/ao/Kyb/PersonalDetails/PersonalDetails.tsx"],"sourcesContent":["import { Input } from '@chakra-ui/react';\nimport { format } from 'date-fns';\nimport React, { useEffect, useState } from 'react';\nimport RDatePicker, { ReactDatePickerProps } from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './DatePicker.css';\n\nconst CustomInput = React.forwardRef((props: any, ref: any) => <Input {...props} ref={ref} data-testid=\"date-input\" variant=\"primary\" />);\n/**\n * Datepicker with custom input element\n * @param {ReactDatePickerProps} props\n * @returns {React.ReactNode}\n */\nconst DatePicker:React.FC<ReactDatePickerProps> = ({ value, onChange, ...props }) => {\n  const [selectedDate, updateDate] = useState<string | undefined>(value);\n\n  useEffect(() => {\n    if (value) {\n      updateDate(format(new Date(value), 'MM / dd / yyyy'));\n    }\n  }, [value]);\n\n  return (\n    <RDatePicker\n      {...props}\n      customInput={<CustomInput />}\n      dateFormat=\"MM / dd / yyyy\"\n      value={selectedDate}\n      onChange={(date, e) => {\n        if (date) { updateDate(format(date, 'MM / dd / yyyy')); }\n        onChange(date, e);\n      }}\n    />\n  );\n};\n\nexport default DatePicker;\n","import React, { useLayoutEffect, useMemo, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\nimport { documentTypes } from '../utils/general';\n\ntype Props = {\n    isLast4?: boolean;\n    idType?: string;\n    value: string;\n    // eslint-disable-next-line no-unused-vars\n    onChange: (maskedValue: string, unmaskedValue: string, isValid: boolean) => void;\n}\n\nconst SsnInput:React.FC<Props> = ({\n  onChange, value, isLast4, idType = 'ssn'\n}) => {\n  const mask = useMemo(() => {\n    const doc = documentTypes.find((d) => d.type === idType);\n    if (!doc) {\n      return isLast4 ? '9999' : '999-99-9999';\n    }\n    return isLast4 ? doc.last4 : doc.full;\n  }, [isLast4, documentTypes, idType]);\n\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask({\n        mask,\n        showMaskOnHover: false,\n        showMaskOnFocus: false,\n        jitMasking: true,\n      }).mask(input.current);\n    }\n  }, [mask]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"ssn-input\"\n      variant=\"primary\"\n      ref={input}\n      onChange={(e:any) => {\n        const v = isLast4 ? e.target.value.substring(0, 4) : e.target.value;\n        const isValid = Inputmask.isValid(v, { mask });\n        const unmaskedValue: string = (input.current as any)?.inputmask.unmaskedvalue();\n        onChange(v, unmaskedValue, isValid);\n      }}\n      value={value}\n    />\n  );\n};\n\nSsnInput.defaultProps = {\n  isLast4: true,\n};\n\nexport default SsnInput;\n","import { actionCreator } from '..';\nimport { business, businessOwner } from '../../types/business';\nimport {\n  UPDATE_BUSINESS_LIST, UPDATE_OWNERS_LIST, UPDATE_SELECTED_BUSINESS, UPDATE_SELECTED_BUSINESS_OWNER\n} from '../actionTypes/business';\n\nexport const updateBusinessList: actionCreator<business[]> = (payload) => ({\n  type: UPDATE_BUSINESS_LIST,\n  payload,\n});\n\nexport const updateSelectedBusiness: actionCreator<business> = (payload) => ({\n  type: UPDATE_SELECTED_BUSINESS,\n  payload,\n});\n\nexport const updateOwnersList: actionCreator<businessOwner[]> = (payload) => ({\n  type: UPDATE_OWNERS_LIST,\n  payload,\n});\n\nexport const updateSelectedBusinessOwner: actionCreator<businessOwner | null> = (payload) => ({\n  type: UPDATE_SELECTED_BUSINESS_OWNER,\n  payload,\n});\n","import React, {\n  useCallback, useEffect, useMemo, useState\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Button, FormControl, FormLabel, Input, Select, useStyleConfig\n} from '@chakra-ui/react';\nimport PhoneInput from 'react-phone-number-input';\nimport 'react-phone-number-input/style.css';\nimport { shallowEqual } from 'react-redux';\nimport { format, subYears } from 'date-fns';\nimport { useNavigate } from 'react-router-dom';\nimport SsnInput from '../../../../components/SsnInput';\nimport MiniBox from '../../../../layout/MiniBox';\nimport DatePicker from '../../../../components/DatePicker';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport { updateSelectedBusinessOwner } from '../../../../store/actionCreators/business';\nimport { documentTypes } from '../../../../utils/general';\n\ntype KybPersonData = {\n  firstName: string,\n  lastName: string\n  phone: string,\n  email: string,\n  dateOfBirth: string,\n  idNumber: string\n  idType: string\n}\n\n/**\n * Kyb Owner Details - Component for collecting the details of the bussiness owners.\n * @module KYB\n * @returns {JSX.Element}\n */\nconst OwnerDetails = () => {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const dispatch = useAppAsyncDispatch();\n  const [formData, updateFormData] = useState<KybPersonData>({\n    firstName: '',\n    lastName: '',\n    phone: '',\n    email: '',\n    dateOfBirth: '',\n    idNumber: '',\n    idType: 'ssn'\n  });\n  const [isSSNValid, updateSSNValidation] = useState(false);\n\n  const inputStyle:any = useStyleConfig('Input', {\n    variant: 'primary'\n  });\n\n  const selectedBusinessOwner = useAppSelector((store) => store.business.selectedBusinessOwner, shallowEqual);\n\n  const isValid = useMemo(() => {\n    /* eslint-disable no-useless-escape */\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n\n    return formData.firstName.length !== 0 && formData.lastName.length !== 0 && isSSNValid && formData?.idType.length !== 0 && formData?.email.length !== 0 && emailRegex.test(formData.email);\n  }, [formData, isSSNValid]);\n\n  useEffect(() => {\n    if (selectedBusinessOwner) {\n      updateFormData({\n        firstName: selectedBusinessOwner.person.firstName,\n        lastName: selectedBusinessOwner.person.lastName,\n        email: selectedBusinessOwner.person.email,\n        phone: selectedBusinessOwner.person.phone,\n        dateOfBirth: selectedBusinessOwner.person.dateOfBirth,\n        idNumber: selectedBusinessOwner.person.idNumber,\n        idType: selectedBusinessOwner.person.idType\n      });\n\n      if (selectedBusinessOwner.person.idNumber.length !== 0) { updateSSNValidation(true); }\n    }\n  }, [selectedBusinessOwner]);\n\n  /**\n   * letter validation with state update\n   */\n  const allowLetterValidation = useCallback(\n    (nameType: keyof KybPersonData, updatedName: string) => {\n      if (/^[a-zA-Z\\s]+$/.test(updatedName) || updatedName === '') {\n        updateFormData({\n          ...formData,\n          [nameType]: updatedName\n        });\n      }\n    },\n    [formData],\n  );\n\n  const submit = useCallback(() => {\n    let owner: any = {};\n    if (selectedBusinessOwner) {\n      owner = {\n        id: selectedBusinessOwner.id,\n        ownership: selectedBusinessOwner.ownership,\n        person: {\n          ...formData,\n          address: selectedBusinessOwner.person.address\n        }\n      };\n    } else {\n      owner = {\n        person: {\n          ...formData,\n          address: {\n            line1: '',\n            line2: '',\n            city: '',\n            state: '',\n            country: '',\n            postalCode: '',\n            addressType: 'legal'\n          }\n        }\n      };\n    }\n    dispatch(updateSelectedBusinessOwner(owner));\n    setTimeout(() => {\n      navigate('/ao/kyb/ownerAddress');\n    }, 0);\n  }, [selectedBusinessOwner, formData]);\n\n  return (\n    <div className=\"page\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        submit();\n      }}\n      >\n        <MiniBox\n          varient=\"box\"\n          heading={t('owner_personal_details.title')}\n          footer={(\n            <Button data-testid=\"submit-btn\" width=\"100%\" variant=\"primary\" type=\"submit\" disabled={!isValid}>\n              {t('owner_personal_details.ctaText')}\n            </Button>\n)}\n        >\n          <Box width=\"100%\">\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.firstNameLabel')}\n              </FormLabel>\n              <Input\n                data-testid=\"firstName\"\n                value={formData.firstName}\n                onChange={(e) => {\n                  allowLetterValidation('firstName', e.target.value);\n                }}\n                variant=\"primary\"\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.lastNameLabel')}\n              </FormLabel>\n              <Input\n                data-testid=\"lastName\"\n                value={formData.lastName}\n                onChange={(e) => {\n                  allowLetterValidation('lastName', e.target.value);\n                }}\n                variant=\"primary\"\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.mobileLabel')}\n              </FormLabel>\n              <PhoneInput\n                data-testid=\"mobileInput\"\n                style={inputStyle.field}\n                className=\"country-input\"\n                international\n                limitMaxLength\n                defaultCountry=\"US\"\n                countryCallingCodeEditable={false}\n                value={formData.phone}\n                countries={['US', 'IN']}\n                onChange={(v) => {\n                  updateFormData({\n                    ...formData,\n                    phone: v || ''\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.emailLabel')}\n              </FormLabel>\n              <Input\n                data-testid=\"email\"\n                variant=\"primary\"\n                type=\"email\"\n                onChange={(e) => {\n                  updateFormData({\n                    ...formData,\n                    email: e.target.value\n                  });\n                }}\n                value={formData?.email}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.dobLabel')}\n              </FormLabel>\n              <DatePicker\n                maxDate={subYears(new Date(), 18)}\n                dateFormat=\"MM / dd / yyyy\"\n                peekNextMonth\n                showMonthDropdown\n                showYearDropdown\n                dropdownMode=\"select\"\n                value={formData.dateOfBirth}\n                onChange={(date) => {\n                  if (date) {\n                    updateFormData({\n                      ...formData,\n                      dateOfBirth: format(date, 'yyyy-MM-dd')\n                    });\n                  }\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('owner_personal_details.documentType')}\n              </FormLabel>\n              <Select\n                data-testid=\"document-type\"\n                variant=\"primary\"\n                value={formData?.idType}\n                onChange={(e:any) => updateFormData({\n                  ...formData,\n                  idType: e.target.value\n                })}\n                placeholder={t('owner_personal_details.documentType')}\n              >\n                {\n                  documentTypes.map((d) => (\n                    <option key={d.type} value={d.type}>\n                      {d.label}\n                    </option>\n                  ))\n                }\n              </Select>\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t(`owner_personal_details.${formData?.idType}`, 'Social Security Number')}\n              </FormLabel>\n              <SsnInput\n                isLast4={false}\n                idType={formData?.idType}\n                value={formData.idNumber}\n                onChange={(_, v, validation) => {\n                  updateFormData({\n                    ...formData,\n                    idNumber: v\n                  });\n                  updateSSNValidation(validation);\n                }}\n              />\n            </FormControl>\n\n          </Box>\n        </MiniBox>\n      </form>\n    </div>\n  );\n};\n\nexport default OwnerDetails;\n"],"names":["CustomInput","React","props","ref","_jsx","Input","_objectSpread","variant","_ref","value","onChange","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","selectedDate","updateDate","useEffect","format","Date","RDatePicker","customInput","dateFormat","date","e","SsnInput","isLast4","_ref$idType","idType","mask","useMemo","doc","documentTypes","find","d","type","last4","full","input","useRef","useLayoutEffect","current","Inputmask","showMaskOnHover","showMaskOnFocus","jitMasking","_input$current","v","target","substring","isValid","unmaskedValue","inputmask","unmaskedvalue","defaultProps","updateBusinessList","payload","UPDATE_BUSINESS_LIST","updateSelectedBusiness","UPDATE_SELECTED_BUSINESS","updateOwnersList","UPDATE_OWNERS_LIST","updateSelectedBusinessOwner","UPDATE_SELECTED_BUSINESS_OWNER","t","useTranslation","navigate","useNavigate","dispatch","useAppAsyncDispatch","firstName","lastName","phone","email","dateOfBirth","idNumber","formData","updateFormData","_useState3","_useState4","isSSNValid","updateSSNValidation","inputStyle","useStyleConfig","selectedBusinessOwner","useAppSelector","store","business","shallowEqual","length","test","person","allowLetterValidation","useCallback","nameType","updatedName","_defineProperty","submit","owner","id","ownership","address","line1","line2","city","state","country","postalCode","addressType","setTimeout","className","children","onSubmit","preventDefault","MiniBox","varient","heading","footer","Button","width","disabled","_jsxs","Box","FormControl","FormLabel","PhoneInput","style","field","international","limitMaxLength","defaultCountry","countryCallingCodeEditable","countries","DatePicker","maxDate","subYears","peekNextMonth","showMonthDropdown","showYearDropdown","dropdownMode","Select","placeholder","map","label","concat","_","validation"],"sourceRoot":""}