{"version":3,"file":"static/js/1611.27b06842.chunk.js","mappings":"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","sources":["components/Plaid.tsx","webpack://drop-in-ui/./src/views/pullfunds/MoveFundsAnotherBank/MoveFundsAnotherBank.module.css?dd4c","views/pullfunds/MoveFundsAnotherBank/MoveFundsAnotherBank.tsx"],"sourcesContent":["import { useEffect, FunctionComponent } from 'react';\nimport {\n  usePlaidLink,\n  PlaidLinkOptions,\n  PlaidLinkOnSuccess,\n  PlaidLinkOnExit\n} from 'react-plaid-link';\n\ninterface Props {\n  token: string;\n  onSuccess: PlaidLinkOnSuccess;\n  onExit: PlaidLinkOnExit\n}\n\nconst OpenPlaidLink: FunctionComponent<Props> = ({ token, onSuccess, onExit }) => {\n  const config: PlaidLinkOptions = {\n    // When re-initializing Link after OAuth redirection, the same\n    // Link token from the first initialization must be used\n    token,\n    onSuccess,\n    // receivedRedirectUri: document.location.href, // required for OAuth\n    onExit\n    // onEvent\n  };\n\n  const { open, ready } = usePlaidLink(config);\n\n  // this opens link as soon as it's ready\n  useEffect(() => {\n    if (!ready) {\n      return;\n    }\n    // const plaidLinkIframe = document.getElementById('plaid-link-iframe-1')\n    open();\n  }, [ready, open]);\n\n  // don't render anything, just open Link\n  return null;\n};\n\nexport default OpenPlaidLink;\n","// extracted by mini-css-extract-plugin\nexport default {\"bankList\":\"MoveFundsAnotherBank_bankList__rOFOF\",\"pullFrom\":\"MoveFundsAnotherBank_pullFrom__2wZWm\",\"bankInfo\":\"MoveFundsAnotherBank_bankInfo__w2vAO\",\"removeBank\":\"MoveFundsAnotherBank_removeBank__J95Cs\",\"linkAccount\":\"MoveFundsAnotherBank_linkAccount__OtDC-\",\"transferType\":\"MoveFundsAnotherBank_transferType__iTsG1\"};","import React, { useCallback, useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Text, HStack, Button, RadioGroup, Radio\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport MiniBox from '../../../layout/MiniBox';\nimport Icon from '../../../components/Icon';\nimport style from './MoveFundsAnotherBank.module.css';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport {\n  fetchPlaidToken, linkPlaidAccount, listSelfBanks, removeSelfBank\n} from '../../../store/middlewares/account';\nimport { apiErrorHandler, showNotification } from '../../../utils/general';\nimport OpenPlaidLink from '../../../components/Plaid';\nimport { useDrawer } from '../../../hooks/drawer';\n\nconst MoveFundsAnotherBankInfo = React.lazy(() => import('../MoveFundsAnotherBankInfo/MoveFundsAnotherBankInfo'));\n\nconst MoveFundsAnotherBank = () => {\n  const { t } = useTranslation();\n  const { open } = useDrawer();\n  const dispatch = useAppAsyncDispatch();\n  const { selectedAccount: account, selfBankAccounts } = useAppSelector((store) => store.account, shallowEqual);\n\n  const [plaidToken, updatePlaidToken] = useState<string | null>(null);\n  const [selectedContact, selectContact] = useState('');\n\n  const getPlaidToken = useCallback(() => {\n    if (account) {\n      dispatch(fetchPlaidToken(account?.id))\n        .then((data) => {\n          updatePlaidToken(data.linkToken);\n        })\n        .catch(apiErrorHandler);\n    }\n  }, [account]);\n\n  const plaidOnSuccess = useCallback(\n    // eslint-disable-next-line camelcase\n    (public_token: string, metadata: any) => {\n      updatePlaidToken(null);\n      if (account?.id) {\n        dispatch(\n          linkPlaidAccount({\n            accountId: account.id,\n            plaidAccountId: metadata.accounts[0]?.id,\n            // eslint-disable-next-line camelcase\n            plaidToken: public_token,\n          })\n        ).catch(() => {\n          showNotification('An error occurred.', 'Unable to verify plaid account', 'error');\n        });\n      }\n    },\n    [account]\n  );\n\n  useEffect(() => {\n    if (account) {\n      dispatch(listSelfBanks(account.id));\n    }\n  }, [account]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading={t('move_funds_another_bank.title')}\n        footer={(\n          <Button\n            width=\"100%\"\n            variant=\"primary\"\n            disabled={selectedContact === ''}\n            onClick={() => {\n              open(MoveFundsAnotherBankInfo, {\n                contactId: selectContact\n              });\n            }}\n          >\n            {t('move_funds_another_bank.ctaText')}\n          </Button>\n        )}\n      >\n        <Box width=\"100%\">\n          {selfBankAccounts.length !== 0 ? (\n            <>\n              <Text variant=\"large\" className={style.pullFrom}>{t('move_funds_another_bank.list_title')}</Text>\n\n              <Box className={style.bankList}>\n                <RadioGroup onChange={selectContact} value={selectedContact}>\n                  {selfBankAccounts.map((b) => (\n                    <Box key={b.id} className={style.bankInfo}>\n                      <Radio value={b.id}>\n                        <Text variant=\"regular\" className=\"text-dark\">\n                          {b.ach.bankName}\n                          {' '}\n                          XXXXXX\n                          {' '}\n                          {b.ach.accountNumber.slice(b.ach.accountNumber.length - 4)}\n                        </Text>\n                      </Radio>\n                      <Text\n                        className={style.removeBank}\n                        onClick={() => {\n                          dispatch(removeSelfBank(b.id));\n                        }}\n                      >\n                        {t('move_funds_another_bank.remove')}\n\n                      </Text>\n                    </Box>\n                  ))}\n                </RadioGroup>\n\n              </Box>\n\n            </>\n          ) : null }\n\n          <Text variant=\"large\" className={style.linkAccount}>{t('move_funds_another_bank.linkAccount')}</Text>\n\n          <Button\n            width=\"100%\"\n            variant=\"unstyled\"\n            onClick={() => {\n              getPlaidToken();\n            }}\n          >\n            <HStack className={style.transferType}>\n              <Box>\n                <Text variant=\"regular\">{t('move_funds_another_bank.linkAnotherAccount')}</Text>\n              </Box>\n              <Icon icon=\"Arrow-small-right\" size={12} className=\"svg-light-grey-1\" />\n            </HStack>\n          </Button>\n\n          {plaidToken ? (\n            <OpenPlaidLink\n              token={plaidToken}\n              onSuccess={plaidOnSuccess}\n              onExit={() => {\n                updatePlaidToken(null);\n              }}\n            />\n          ) : null}\n\n        </Box>\n      </MiniBox>\n\n    </div>\n  );\n};\n\nexport default MoveFundsAnotherBank;\n"],"names":["_ref","config","token","onSuccess","onExit","_usePlaidLink","usePlaidLink","open","ready","useEffect","MoveFundsAnotherBankInfo","React","t","useTranslation","useDrawer","dispatch","useAppAsyncDispatch","_useAppSelector","useAppSelector","store","account","shallowEqual","selectedAccount","selfBankAccounts","_useState","useState","_useState2","_slicedToArray","plaidToken","updatePlaidToken","_useState3","_useState4","selectedContact","selectContact","getPlaidToken","useCallback","fetchPlaidToken","id","then","data","linkToken","catch","apiErrorHandler","plaidOnSuccess","public_token","metadata","_metadata$accounts$","linkPlaidAccount","accountId","plaidAccountId","accounts","showNotification","listSelfBanks","_jsx","className","children","MiniBox","heading","footer","Button","width","variant","disabled","onClick","contactId","_jsxs","Box","length","_Fragment","Text","style","RadioGroup","onChange","value","map","b","Radio","ach","bankName","accountNumber","slice","removeSelfBank","HStack","Icon","icon","size","OpenPlaidLink"],"sourceRoot":""}