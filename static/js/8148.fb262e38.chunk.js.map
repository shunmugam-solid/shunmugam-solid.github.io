{"version":3,"file":"static/js/8148.fb262e38.chunk.js","mappings":"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","sources":["components/CurrencyInput.tsx","webpack://drop-in-ui/./src/views/transactions/TransactionFilter/TransactionFilter.module.css?e30c","views/transactions/TransactionFilter/TransactionFilter.tsx","views/transactions/TransactionFilter/Index.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","// extracted by mini-css-extract-plugin\nexport default {\"filter_header\":\"TransactionFilter_filter_header__a8wBs\",\"input_picker\":\"TransactionFilter_input_picker__+ZtyG\",\"amountInputs\":\"TransactionFilter_amountInputs__PwwNL\"};","/* eslint-disable no-constant-condition */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Box, Button, Text, HStack, VStack, Checkbox, FormControl, FormLabel, RadioGroup, Radio\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport DatePicker from 'react-datepicker';\nimport MiniBox from '../../../layout/MiniBox';\nimport Icon from '../../../components/Icon';\nimport style from './TransactionFilter.module.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport CurrencyInput from '../../../components/CurrencyInput';\n\ntype filterStates = {\n  transactionType: 'credit' | 'debit' | 'card' | undefined,\n  timePeriod: 'thisWeek' | 'thisMonth' | 'lastMonth' | 'custom' | undefined,\n  amount: {\n    min: string,\n    max: string\n  },\n  startDate: Date,\n  endDate: Date\n};\n\ntype Props = {\n  showTransactionTypeFilter?: boolean,\n  showTimePeriodFilter?: boolean,\n  showAmountFilter?: boolean,\n  showCardsFilter?: boolean,\n  onApply?: (d: filterStates) => void,\n  filters?: filterStates,\n}\nconst TransactionFilter = ({\n  showTransactionTypeFilter, showTimePeriodFilter, showAmountFilter, showCardsFilter, filters, onApply\n}: Props) => {\n  const { t } = useTranslation();\n  const [showTransactionTypeData, setShowTransactionTypeData] = useState(false);\n  const [showTimePeriodData, setShowTimePeriodData] = useState(false);\n  const [showAmount, setShowAmount] = useState(false);\n  const [showCardsData, setShowCardsData] = useState(false);\n\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n\n  const accountType = 'cash';\n\n  const [transactionType, setTransactionType] = useState<filterStates['transactionType']>();\n\n  const [timePeriod, setTimePeriod] = useState<filterStates['timePeriod']>();\n\n  const [cardType, setCardType] = useState({\n    physical: false,\n    virtual: true,\n  });\n\n  const [amount, setAmount] = useState<filterStates['amount']>({\n    min: '',\n    max: ''\n  });\n\n  useEffect(() => {\n    if (filters) {\n      if (filters.transactionType) {\n        setTransactionType(filters.transactionType);\n      }\n      if (filters.timePeriod) {\n        setTimePeriod(filters.timePeriod);\n      }\n      if (filters.amount) {\n        setAmount(filters.amount);\n      }\n      if (filters.startDate) {\n        setStartDate(new Date(filters.startDate));\n      }\n      if (filters.endDate) {\n        setEndDate(new Date(filters.endDate));\n      }\n    }\n  }, [filters]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading=\"Filter\"\n        showBack\n        footer={(\n          <Button\n            data-testid=\"submit-btn\"\n            width=\"100%\"\n            variant=\"primary\"\n            onClick={() => {\n              if (onApply) {\n                onApply({\n                  transactionType,\n                  timePeriod,\n                  amount,\n                  startDate,\n                  endDate\n                });\n              }\n            }}\n          >\n            {t('filter.ctaText')}\n          </Button>\n)}\n      >\n        <Box>\n\n          {/* Filter type */}\n          {showTransactionTypeFilter ? (\n            <Box data-testid=\"transaction-type-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowTransactionTypeData(!showTransactionTypeData)}>\n                <Text variant=\"large\">{t('filter.transactionType')}</Text>\n                {showTransactionTypeData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showTransactionTypeData ? (\n                  <RadioGroup onChange={(v:'card' | 'credit' | 'debit') => v && setTransactionType(v)} value={transactionType}>\n                    <VStack alignItems=\"flex-start\" pb=\"20px\">\n                      <Radio value=\"credit\" variant=\"primary\">\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.credits')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" value=\"debit\">\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.debits')}</Text>\n                      </Radio>\n                      {accountType === 'cash'\n                        ? (\n                          <Radio variant=\"primary\" value=\"card\">\n                            <Text variant=\"regular\" className=\"text-dark\">{t('filter.cardTransactions')}</Text>\n                          </Radio>\n                        ) : null }\n                    </VStack>\n                  </RadioGroup>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Time Period */}\n          {showTimePeriodFilter ? (\n            <Box data-testid=\"date-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowTimePeriodData(!showTimePeriodData)}>\n                <Text variant=\"large\">{t('filter.timePeriod')}</Text>\n                {showTimePeriodData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showTimePeriodData ? (\n                  <RadioGroup>\n                    <VStack alignItems=\"flex-start\" pb=\"20px\">\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'thisWeek' ? undefined : 'thisWeek')} isChecked={timePeriod === 'thisWeek'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.thisWeek')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'thisMonth' ? undefined : 'thisMonth')} isChecked={timePeriod === 'thisMonth'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.thisMonth')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'lastMonth' ? undefined : 'lastMonth')} isChecked={timePeriod === 'lastMonth'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.lastMonth')}</Text>\n                      </Radio>\n                      <Radio variant=\"primary\" onChange={() => setTimePeriod(timePeriod === 'custom' ? undefined : 'custom')} isChecked={timePeriod === 'custom'}>\n                        <Text variant=\"regular\" className=\"text-dark\">{t('filter.custom')}</Text>\n                      </Radio>\n                      {timePeriod === 'custom'\n                        ? (\n                          <HStack pt=\"20px\">\n                            <FormControl variant=\"primary\">\n                              <FormLabel variant=\"primary\">\n                                {t('filter.from')}\n                              </FormLabel>\n                              <DatePicker className={style.input_picker} selected={startDate} onChange={(date:Date) => setStartDate(date)} placeholderText={t('filter.startDate')} />\n                            </FormControl>\n                            <FormControl variant=\"primary\">\n                              <FormLabel variant=\"primary\">\n                                {t('filter.to')}\n                              </FormLabel>\n                              <DatePicker className={style.input_picker} selected={endDate} onChange={(date:Date) => setEndDate(date)} placeholderText={t('filter.endDate')} />\n                            </FormControl>\n                          </HStack>\n                        ) : null }\n                    </VStack>\n                  </RadioGroup>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Amount */}\n          {showAmountFilter ? (\n            <Box data-testid=\"amount-filter\">\n              <HStack className={style.filter_header} onClick={() => setShowAmount(!showAmount)}>\n                <Text variant=\"large\">{t('filter.amount')}</Text>\n                {showAmount ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showAmount ? (\n                  <HStack className={style.amountInputs}>\n                    <FormControl variant=\"primary\">\n                      <FormLabel variant=\"primary\">\n                        {t('filter.from')}\n                      </FormLabel>\n                      <CurrencyInput\n                        value={amount.min}\n                        onChange={(value) => setAmount({\n                          ...amount,\n                          min: value || ''\n                        })}\n                      />\n                    </FormControl>\n                    <FormControl variant=\"primary\">\n                      <FormLabel variant=\"primary\">\n                        {t('filter.to')}\n                      </FormLabel>\n                      <CurrencyInput\n                        value={amount.max}\n                        onChange={(value) => setAmount({\n                          ...amount,\n                          max: value || ''\n                        })}\n                      />\n                    </FormControl>\n                  </HStack>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n          {/* Cards */}\n          {showCardsFilter && false ? (\n            <Box>\n              <HStack className={style.filter_header} onClick={() => setShowCardsData(!showCardsData)}>\n                <Text variant=\"large\">{t('filter.cards')}</Text>\n                {showCardsData ? <Icon className=\"icon-customizable\" icon=\"icon-minus\" size={20} /> : <Icon className=\"icon-customizable\" icon=\"icon-plus\" size={20} />}\n              </HStack>\n              <Box borderBottom=\"1px solid var(--border-color-1)\">\n                {showCardsData ? (\n                  <VStack alignItems=\"flex-start\" pb=\"20px\">\n                    <Checkbox onChange={() => setCardType({ ...cardType, physical: !cardType.physical })} isChecked={cardType.physical}>\n                      <Text variant=\"regular\">{t('filter.physical')}</Text>\n                    </Checkbox>\n                    <Checkbox onChange={() => setCardType({ ...cardType, virtual: !cardType.virtual })} isChecked={cardType.virtual}>\n                      <Text variant=\"regular\">{t('filter.virtual')}</Text>\n                    </Checkbox>\n                  </VStack>\n                ) : null}\n              </Box>\n            </Box>\n          ) : null}\n\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default TransactionFilter;\n","import React, { useMemo } from 'react';\nimport { shallowEqual } from 'react-redux';\nimport {\n  startOfWeek, endOfWeek, startOfMonth, endOfMonth, format\n} from 'date-fns';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { updateTransactionFilter } from '../../../store/actionCreators/transaction';\nimport TransactionFilter from './TransactionFilter';\nimport { filterData } from '../../../types/transaction';\nimport { useDrawer } from '../../../hooks/drawer';\nimport { eventEmitter, Events } from '../../../utils/events';\n\nconst Filter = () => {\n  const tmpFilters = useAppSelector((store) => store.transaction.filters.tmpStates, shallowEqual);\n  const dispatch = useAppAsyncDispatch();\n  const { close } = useDrawer();\n\n  const filtersData = useMemo(() => {\n    const filterOptions: filterData & {timePeriod?: string} = {};\n    const filterObject: any = {\n      ...tmpFilters\n    };\n    if (filterOptions.txnType === 'credit' || filterOptions.txnType === 'debit' || filterOptions.txnType === 'card') {\n      filterObject.transactionType = filterOptions.txnType;\n    }\n    // if (filterOptions.transferType === 'card') {\n    //   filterObject.transactionType.cardTransactions = true;\n    // }\n    if (filterOptions.startDate) { filterObject.startDate = filterOptions.startDate; }\n    if (filterOptions.endDate) { filterObject.endDate = filterOptions.endDate; }\n    if (filterOptions.timePeriod) { filterObject.timePeriod = filterOptions.timePeriod; }\n    if (filterOptions.minAmount) { filterObject.amount.min = filterOptions.minAmount; }\n    if (filterOptions.maxAmount) { filterObject.amount.max = filterOptions.maxAmount; }\n\n    return filterObject;\n  }, [tmpFilters]);\n\n  return (\n    <TransactionFilter\n      showAmountFilter\n      showCardsFilter\n      showTimePeriodFilter\n      showTransactionTypeFilter\n      filters={filtersData}\n      onApply={({\n        transactionType, amount, timePeriod, startDate, endDate\n      }) => {\n        // eslint-disable-next-line @typescript-eslint/no-shadow\n        const filters:filterData = {};\n        // transactionType\n        if (transactionType === 'credit' || transactionType === 'debit' || transactionType === 'card') {\n          filters.txnType = transactionType;\n        }\n        // else if (transactionType === 'card') {\n        //   filters.transferType = 'card';\n        // }\n\n        // date\n        const today = new Date();\n        const lastday = new Date(today.getFullYear(), today.getMonth(), 0);\n        switch (timePeriod) {\n          case 'thisWeek':\n            filters.startDate = format(startOfWeek(today), 'yyyy-MM-dd');\n            filters.endDate = format(endOfWeek(today), 'yyyy-MM-dd');\n            break;\n          case 'thisMonth':\n            filters.startDate = format(startOfMonth(today), 'yyyy-MM-dd');\n            filters.endDate = format(endOfMonth(today), 'yyyy-MM-dd');\n            break;\n          case 'lastMonth':\n            filters.startDate = format(startOfMonth(lastday), 'yyyy-MM-dd');\n            filters.endDate = format(endOfMonth(lastday), 'yyyy-MM-dd');\n            break;\n          case 'custom':\n            filters.startDate = format(startDate, 'yyyy-MM-dd');\n            filters.endDate = format(endDate, 'yyyy-MM-dd');\n            break;\n          default:\n            break;\n        }\n\n        // amount\n        if (amount.min !== '') {\n          filters.minAmount = amount.min;\n        }\n        if (amount.max !== '') {\n          filters.maxAmount = amount.max;\n        }\n\n        dispatch(updateTransactionFilter({\n          data: filters,\n          tmpStates: {\n            transactionType, amount, timePeriod, startDate, endDate\n          }\n        }));\n\n        setTimeout(() => {\n          eventEmitter.dispatch(Events.TRANSACTION_REFRESH, {\n            data: filters,\n            tmpStates: {\n              transactionType, amount, timePeriod, startDate, endDate\n            }\n          });\n        }, 0);\n\n        close();\n      }}\n    />\n  );\n};\n\nexport default Filter;\n"],"names":["_ref","onChange","value","placeholder","prefix","digits","input","useRef","useLayoutEffect","current","Inputmask","autoUnmask","allowMinus","rightAlign","numericInput","mask","_jsx","Input","variant","ref","e","v","target","showTransactionTypeFilter","showTimePeriodFilter","showAmountFilter","filters","showCardsFilter","onApply","t","useTranslation","_useState","useState","_useState2","_slicedToArray","showTransactionTypeData","setShowTransactionTypeData","_useState3","_useState4","showTimePeriodData","setShowTimePeriodData","_useState5","_useState6","showAmount","setShowAmount","_useState7","_useState8","_useState9","Date","_useState10","startDate","setStartDate","_useState11","_useState12","endDate","setEndDate","_useState13","_useState14","transactionType","setTransactionType","_useState15","_useState16","timePeriod","setTimePeriod","_useState17","physical","virtual","_useState18","_useState19","min","max","_useState20","amount","setAmount","useEffect","className","children","MiniBox","heading","showBack","footer","Button","width","onClick","_jsxs","Box","HStack","style","Text","Icon","icon","size","borderBottom","RadioGroup","VStack","alignItems","pb","Radio","undefined","isChecked","pt","FormControl","FormLabel","DatePicker","selected","date","placeholderText","CurrencyInput","_objectSpread","tmpFilters","useAppSelector","store","transaction","tmpStates","shallowEqual","dispatch","useAppAsyncDispatch","close","useDrawer","filtersData","useMemo","filterOptions","filterObject","txnType","minAmount","maxAmount","TransactionFilter","today","lastday","getFullYear","getMonth","format","startOfWeek","endOfWeek","startOfMonth","endOfMonth","updateTransactionFilter","data","setTimeout","eventEmitter","Events","TRANSACTION_REFRESH"],"sourceRoot":""}