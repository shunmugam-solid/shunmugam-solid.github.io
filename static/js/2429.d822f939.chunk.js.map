{"version":3,"file":"static/js/2429.d822f939.chunk.js","mappings":"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","sources":["components/AccountNumberInput.tsx","components/CurrencyInput.tsx","components/RoutingNumberInput.tsx","store/actionCreators/payment.ts","store/middlewares/payment.ts","views/payments/DomesticWire/DomesticWirePayment.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    // eslint-disable-next-line no-unused-vars\n    onChange: (maskedValue: string, unmaskedValue: string, isValid: boolean) => void;\n}\n\nconst mask = '9{6,17}';\n\nconst AccountNumberInput:React.FC<Props> = ({\n  onChange, value,\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask({\n        mask,\n        showMaskOnHover: false,\n        showMaskOnFocus: false,\n        jitMasking: true,\n      }).mask(input.current);\n    }\n  }, [mask]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"ssn-input\"\n      variant=\"primary\"\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        const isValid = Inputmask.isValid(v, { mask });\n        const unmaskedValue: string = (input.current as any)?.inputmask.unmaskedvalue();\n        onChange(v, unmaskedValue, isValid);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default AccountNumberInput;\n","import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    // eslint-disable-next-line no-unused-vars\n    onChange: (maskedValue: string, unmaskedValue: string, isValid: boolean) => void;\n}\n\nconst mask = '999999999';\n\nconst RoutingNumberInput:React.FC<Props> = ({\n  onChange, value,\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask({\n        mask,\n        showMaskOnHover: false,\n        showMaskOnFocus: false,\n        jitMasking: true,\n      }).mask(input.current);\n    }\n  }, [mask]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"routing-input\"\n      variant=\"primary\"\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        const isValid = Inputmask.isValid(v, { mask });\n        const unmaskedValue: string = (input.current as any)?.inputmask.unmaskedvalue();\n        onChange(v, unmaskedValue, isValid);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default RoutingNumberInput;\n","/* eslint-disable import/prefer-default-export */\nimport { actionCreator } from '..';\nimport { paymentResponse } from '../../types/payment';\nimport { UPDATE_PAYMENT_RESPONSE } from '../actionTypes/payment';\n\n/**\n * update core state\n * @param {*} payload\n * @returns {Action<string, any>}\n */\nexport const updatePaymentResponse: actionCreator<paymentResponse> = (payload) => ({\n  type: UPDATE_PAYMENT_RESPONSE,\n  payload\n});\n","import http from '../../utils/http';\nimport { loading } from '../../utils/general';\nimport { AsyncAppAction } from '..';\nimport { updatePaymentResponse } from '../actionCreators/payment';\nimport { paymentResponse } from '../../types/payment';\n\n/**\n * intrabank\n * @param payload\n * @returns\n */\nexport const intrabankPay = (payload: {\n    accountId: string,\n    contactId: string,\n    amount: string,\n    description: string\n  }): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n  /* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/intrabank', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const achPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/ach', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * wire\n * @param payload\n * @returns\n */\nexport const wirePay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'domestic' | 'international'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/wire', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * send a card\n * @param payload\n * @returns\n */\nexport const sendCardPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'virtual'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/card', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const checkPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  type: 'physical',\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/check', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n","import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, Button, FormControl, FormLabel, Input, Select\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { wirePay } from '../../../store/middlewares/payment';\nimport { updateContact } from '../../../store/middlewares/contact';\nimport { apiErrorHandler } from '../../../utils/general';\nimport CurrencyInput from '../../../components/CurrencyInput';\nimport AccountNumberInput from '../../../components/AccountNumberInput';\nimport RoutingNumberInput from '../../../components/RoutingNumberInput';\n\nconst accountTypes = {\n  personalSavings: 'Personal Savings',\n  personalChecking: 'Personal Checking',\n  businessSavings: 'Business Savings',\n  businessChecking: 'Business Checking'\n};\n\nconst DomesticWirePayment:React.FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const navigate = useNavigate();\n\n  const accountDetails = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const contactDetails = useAppSelector((store) => store.contact.selectedContact, shallowEqual);\n  const [localContactDetails, updateContactData] = useState({\n    address: contactDetails?.wire?.domestic?.address,\n    accountNumber: contactDetails?.wire?.domestic?.accountNumber || '',\n    routingNumber: contactDetails?.wire?.domestic?.routingNumber || '',\n    bankName: contactDetails?.wire?.domestic?.bankName || '',\n    accountType: contactDetails?.wire?.domestic?.accountType || 'personalSavings'\n  });\n\n  const [paymentData, updatePaymentData] = useState<{\n    accountId: string,\n    contactId: string,\n    amount: string,\n    description: string\n    type: 'domestic'\n  }>({\n    amount: '',\n    description: '',\n    contactId: contactDetails?.id || '',\n    accountId: accountDetails?.id || '',\n    type: 'domestic'\n  });\n\n  const isValid = useMemo(() => localContactDetails.accountNumber.length !== 0 && localContactDetails.accountType.length !== 0 && localContactDetails.routingNumber.length !== 0 && localContactDetails.bankName.length !== 0 && paymentData.amount.length !== 0 && parseFloat(paymentData.amount) >= 0.01 && paymentData.description.length !== 0, [localContactDetails, paymentData]);\n\n  const onSubmit = useCallback(() => {\n    if (contactDetails?.id && isValid) {\n      dispatch(updateContact(contactDetails.id, {\n        accountId: contactDetails.accountId,\n        wire: {\n          domestic: {\n            address: localContactDetails.address,\n            accountNumber: localContactDetails.accountNumber,\n            routingNumber: localContactDetails.routingNumber,\n            bankName: localContactDetails.bankName,\n            accountType: localContactDetails.accountType\n          }\n        }\n      })).then(() => {\n        dispatch(wirePay(paymentData))\n          .then(() => {\n            navigate('/payments/success');\n          }).catch(apiErrorHandler);\n      }).catch(apiErrorHandler);\n    }\n  }, [isValid, paymentData, localContactDetails]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading={t('payments_domestic_wire.title')}\n        footer={(\n          <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={onSubmit}>\n            {t('payments_domestic_wire.ctaText')}\n          </Button>\n)}\n      >\n        <Box width=\"100%\" paddingTop=\"15px\">\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.accountNumber')}\n            </FormLabel>\n            <AccountNumberInput\n              value={localContactDetails.accountNumber}\n              onChange={(_, v) => {\n                updateContactData({\n                  ...localContactDetails,\n                  accountNumber: v\n                });\n              }}\n            />\n            {/* <Input\n              variant=\"primary\"\n              maxLength={16}\n              value={localContactDetails.accountNumber}\n              onChange={(e) => {\n                updateContactData({\n                  ...localContactDetails,\n                  accountNumber: e.target.value\n\n                });\n              }}\n            /> */}\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.routingNumber')}\n            </FormLabel>\n            <RoutingNumberInput\n              value={localContactDetails.routingNumber}\n              onChange={(_, v) => {\n                updateContactData({\n                  ...localContactDetails,\n                  routingNumber: v\n\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.accountType')}\n            </FormLabel>\n            <Select\n              variant=\"primary\"\n              value={localContactDetails.accountType}\n              onChange={(e) => {\n                updateContactData({\n                  ...localContactDetails,\n                  accountType: e.target.value\n\n                });\n              }}\n            >\n              {Object.keys(accountTypes).map((a) => <option key={a} value={a}>{(accountTypes as any)[a]}</option>)}\n\n            </Select>\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.bank')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={localContactDetails.bankName}\n              onChange={(e) => {\n                updateContactData({\n                  ...localContactDetails,\n                  bankName: e.target.value\n\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.amount')}\n            </FormLabel>\n            <CurrencyInput\n              value={paymentData.amount}\n              onChange={(value) => {\n                updatePaymentData({\n                  ...paymentData,\n                  amount: value || ''\n                });\n              }}\n            />\n          </FormControl>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t('payments_domestic_wire.purpose')}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={paymentData.description}\n              onChange={(e) => {\n                updatePaymentData({\n                  ...paymentData,\n                  description: e.target.value\n                });\n              }}\n            />\n          </FormControl>\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default DomesticWirePayment;\n"],"names":["mask","_ref","onChange","value","input","useRef","useLayoutEffect","current","Inputmask","showMaskOnHover","showMaskOnFocus","jitMasking","_jsx","Input","variant","ref","e","_input$current","v","target","isValid","unmaskedValue","inputmask","unmaskedvalue","placeholder","prefix","digits","autoUnmask","allowMinus","rightAlign","numericInput","updatePaymentResponse","payload","type","UPDATE_PAYMENT_RESPONSE","intrabankPay","dispatch","Promise","resolve","reject","loading","http","post","then","data","catch","finally","achPay","_ref2","wirePay","_ref3","sendCardPay","_ref4","checkPay","_ref5","accountTypes","personalSavings","personalChecking","businessSavings","businessChecking","_contactDetails$wire","_contactDetails$wire$","_contactDetails$wire2","_contactDetails$wire3","_contactDetails$wire4","_contactDetails$wire5","_contactDetails$wire6","_contactDetails$wire7","_contactDetails$wire8","_contactDetails$wire9","t","useTranslation","useAppAsyncDispatch","navigate","useNavigate","accountDetails","useAppSelector","store","account","selectedAccount","shallowEqual","contactDetails","contact","selectedContact","_useState","useState","address","wire","domestic","accountNumber","routingNumber","bankName","accountType","_useState2","_slicedToArray","localContactDetails","updateContactData","_useState3","amount","description","contactId","id","accountId","_useState4","paymentData","updatePaymentData","useMemo","length","parseFloat","onSubmit","useCallback","updateContact","apiErrorHandler","className","children","MiniBox","heading","footer","Button","width","disabled","onClick","_jsxs","Box","paddingTop","FormControl","FormLabel","AccountNumberInput","_","_objectSpread","RoutingNumberInput","Select","Object","keys","map","a","CurrencyInput"],"sourceRoot":""}