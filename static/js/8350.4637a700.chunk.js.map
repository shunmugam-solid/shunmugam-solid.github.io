{"version":3,"file":"static/js/8350.4637a700.chunk.js","mappings":"0KAaMA,EAA2B,SAAHC,GAEvB,IADLC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAAOC,EAAOH,EAAPG,QAAOC,EAAAJ,EAAEK,OAAAA,OAAM,IAAAD,EAAG,MAAKA,EAElCE,GAAOC,EAAAA,EAAAA,UAAQ,WACnB,IAAMC,EAAMC,EAAAA,GAAcC,MAAK,SAACC,GAAC,OAAKA,EAAEC,OAASP,CAAM,IACvD,OAAKG,EAGEL,EAAUK,EAAIK,MAAQL,EAAIM,KAFxBX,EAAU,OAAS,aAG9B,GAAG,CAACA,EAASM,EAAAA,GAAeJ,IAEtBU,GAAQC,EAAAA,EAAAA,QAAO,MAarB,OAXAC,EAAAA,EAAAA,kBAAgB,WACVF,EAAMG,SACRC,IAAU,CACRb,KAAAA,EACAc,iBAAiB,EACjBC,iBAAiB,EACjBC,YAAY,IACXhB,KAAKS,EAAMG,QAElB,GAAG,CAACZ,KAIFiB,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJ,cAAY,YACZC,QAAQ,UACRC,IAAKX,EACLd,SAAU,SAAC0B,GAAW,IAADC,EACbC,EAAI1B,EAAUwB,EAAEG,OAAO5B,MAAM6B,UAAU,EAAG,GAAKJ,EAAEG,OAAO5B,MACxD8B,EAAUb,IAAAA,QAAkBU,EAAG,CAAEvB,KAAAA,IACjC2B,EAAsC,QAAjBL,EAAIb,EAAMG,eAAO,IAAAU,OAAA,EAAdA,EAAwBM,UAAUC,gBAChElC,EAAS4B,EAAGI,EAAeD,EAC7B,EACA9B,MAAOA,GAGb,EAEAH,EAASqC,aAAe,CACtBjC,SAAS,GAGX,K,oLCiBA,UA3DY,WACV,IAAQkC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwBC,EAAAA,EAAAA,UAAc,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAlCI,EAAGF,EAAA,GAAEG,EAAQH,EAAA,GAEdb,GAAUzB,EAAAA,EAAAA,UAAQ,WACtB,SAAIwC,GAAsB,IAAfA,EAAIE,OAIjB,GAAG,CAACF,IAEEG,GAASC,EAAAA,EAAAA,cAAY,WACrBnB,GACFO,GAASa,EAAAA,EAAAA,IAASL,IACfM,MAAK,WACJd,GAASe,EAAAA,EAAAA,OAAaD,MAAK,SAACE,GAC1BhB,GAASiB,EAAAA,EAAAA,IAAmBD,EAAcE,aAI1CC,EAAAA,EAAAA,IAAeH,EAAcI,KAC1BN,MAAK,SAACO,GACLnB,EAASmB,EACX,GACJ,GACF,IAAGC,MAAMC,EAAAA,GAEf,GAAG,CAAC9B,EAASe,IAEb,OACExB,EAAAA,EAAAA,KAAA,OAAKwC,UAAU,OAAMC,UACnBzC,EAAAA,EAAAA,KAAA,QAAM0C,SAAU,SAACtC,GACfA,EAAEuC,iBACFhB,GACF,EAAEc,UAEAzC,EAAAA,EAAAA,KAAC4C,EAAAA,EAAO,CACNC,QAAQ,MACRC,QAAShC,EAAE,aACXiC,QACE/C,EAAAA,EAAAA,KAACgD,EAAAA,GAAM,CAACC,MAAM,OAAO/C,QAAQ,UAAUgD,UAAWzC,EAAS0C,QAASxB,EAAOc,SACxE3B,EAAE,iBAEb2B,UAEMW,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAACJ,MAAM,OAAOK,WAAW,OAAOC,cAAc,OAAMd,SAAA,EACtDzC,EAAAA,EAAAA,KAACwD,EAAAA,GAAS,CAACtD,QAAQ,UAASuC,SACzB3B,EAAE,mBAELd,EAAAA,EAAAA,KAACxB,EAAAA,EAAQ,CAACE,SAAU+C,EAAU9C,MAAO6C,YAMjD,C","sources":["components/SsnInput.tsx","views/auth/Ssn/Ssn.tsx"],"sourcesContent":["import React, { useLayoutEffect, useMemo, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\nimport { documentTypes } from '../utils/general';\n\ntype Props = {\n    isLast4?: boolean;\n    idType?: string;\n    value: string;\n    // eslint-disable-next-line no-unused-vars\n    onChange: (maskedValue: string, unmaskedValue: string, isValid: boolean) => void;\n}\n\nconst SsnInput:React.FC<Props> = ({\n  onChange, value, isLast4, idType = 'ssn'\n}) => {\n  const mask = useMemo(() => {\n    const doc = documentTypes.find((d) => d.type === idType);\n    if (!doc) {\n      return isLast4 ? '9999' : '999-99-9999';\n    }\n    return isLast4 ? doc.last4 : doc.full;\n  }, [isLast4, documentTypes, idType]);\n\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask({\n        mask,\n        showMaskOnHover: false,\n        showMaskOnFocus: false,\n        jitMasking: true,\n      }).mask(input.current);\n    }\n  }, [mask]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"ssn-input\"\n      variant=\"primary\"\n      ref={input}\n      onChange={(e:any) => {\n        const v = isLast4 ? e.target.value.substring(0, 4) : e.target.value;\n        const isValid = Inputmask.isValid(v, { mask });\n        const unmaskedValue: string = (input.current as any)?.inputmask.unmaskedvalue();\n        onChange(v, unmaskedValue, isValid);\n      }}\n      value={value}\n    />\n  );\n};\n\nSsnInput.defaultProps = {\n  isLast4: true,\n};\n\nexport default SsnInput;\n","import React, {\n  useCallback, useMemo, useState\n} from 'react';\nimport 'react-phone-number-input/style.css';\nimport {\n  Box, Button, FormLabel\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../layout/MiniBox';\nimport { useAppAsyncDispatch } from '../../../hooks/store';\nimport { getPerson, register } from '../../../store/middlewares/user';\nimport { apiErrorHandler, findNextScreen } from '../../../utils/general';\nimport SsnInput from '../../../components/SsnInput';\nimport { fetchProgramConfig } from '../../../store/middlewares/core';\n\nconst Ssn = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const navigate = useNavigate();\n  const [ssn, setValue] = useState<any>('');\n\n  const isValid = useMemo(() => {\n    if (ssn && ssn.length === 4) {\n      return true;\n    }\n    return false;\n  }, [ssn]);\n\n  const submit = useCallback(() => {\n    if (isValid) {\n      dispatch(register(ssn))\n        .then(() => {\n          dispatch(getPerson()).then((personDetails) => {\n            dispatch(fetchProgramConfig(personDetails.programId));\n            /**\n             * find next screen by kyc details\n             */\n            findNextScreen(personDetails.kyc)\n              .then((nextScreen) => {\n                navigate(nextScreen);\n              });\n          });\n        }).catch(apiErrorHandler);\n    }\n  }, [isValid, ssn]);\n\n  return (\n    <div className=\"page\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        submit();\n      }}\n      >\n        <MiniBox\n          varient=\"box\"\n          heading={t('ssn.title')}\n          footer={(\n            <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n              {t('ssn.ctaText')}\n            </Button>\n  )}\n        >\n          <Box width=\"100%\" paddingTop=\"15px\" paddingBottom=\"30px\">\n            <FormLabel variant=\"primary\">\n              {t('ssn.ssnLabel')}\n            </FormLabel>\n            <SsnInput onChange={setValue} value={ssn} />\n          </Box>\n        </MiniBox>\n      </form>\n    </div>\n  );\n};\n\nexport default Ssn;\n"],"names":["SsnInput","_ref","onChange","value","isLast4","_ref$idType","idType","mask","useMemo","doc","documentTypes","find","d","type","last4","full","input","useRef","useLayoutEffect","current","Inputmask","showMaskOnHover","showMaskOnFocus","jitMasking","_jsx","Input","variant","ref","e","_input$current","v","target","substring","isValid","unmaskedValue","inputmask","unmaskedvalue","defaultProps","t","useTranslation","dispatch","useAppAsyncDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","ssn","setValue","length","submit","useCallback","register","then","getPerson","personDetails","fetchProgramConfig","programId","findNextScreen","kyc","nextScreen","catch","apiErrorHandler","className","children","onSubmit","preventDefault","MiniBox","varient","heading","footer","Button","width","disabled","onClick","_jsxs","Box","paddingTop","paddingBottom","FormLabel"],"sourceRoot":""}