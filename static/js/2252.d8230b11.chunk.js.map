{"version":3,"file":"static/js/2252.d8230b11.chunk.js","mappings":"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","sources":["views/cards/CardCreation/CardAddress/CardAddress.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, Button, Flex, FormControl, FormLabel, Input, Switch, Text, useStyleConfig\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport MiniBox from '../../../../layout/MiniBox';\nimport AddressSearch from '../../../../components/AddressSearch';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport { apiErrorHandler } from '../../../../utils/general';\nimport { cardPayload } from '../../../../types/card';\nimport { updateCardPayload } from '../../../../store/actionCreators/card';\nimport { cardDelete, createCard } from '../../../../store/middlewares/card';\nimport { useDrawer } from '../../../../hooks/drawer';\n\nconst CardBillingAddress = React.lazy(() => import('../CardBillingAddress/CardBillingAddress'));\nconst CardCreated = React.lazy(() => import('../CardCreated/CardCreated'));\n\nconst CardAddress = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const { open, goBack } = useDrawer();\n\n  const style:any = useStyleConfig('FormControl', {\n    variant: 'primary'\n  });\n  const [isAddressSame, setAddressSame] = useState(true);\n  const cardPayloadData = useAppSelector((store) => store.card.cardPayload, shallowEqual);\n  const replaceCardId = useAppSelector((store) => store.card.replaceCardId);\n\n  const setPayload = useCallback((key: keyof cardPayload, value: any) => {\n    if (cardPayloadData) {\n      const copiedData:cardPayload = {\n        ...cardPayloadData,\n        [key]: value\n      };\n\n      dispatch(updateCardPayload(copiedData));\n    }\n  }, [cardPayloadData]);\n\n  const isValid = useMemo(() => (\n    cardPayloadData\n      && !!cardPayloadData.billingAddress\n      && !!cardPayloadData.billingAddress.line1\n      && !!cardPayloadData.billingAddress.city\n      && !!cardPayloadData.billingAddress.state\n      && !!cardPayloadData.billingAddress.country\n      && !!cardPayloadData.billingAddress.postalCode\n      && cardPayloadData.billingAddress.line1.length !== 0\n      && cardPayloadData.billingAddress.city.length !== 0\n      && cardPayloadData.billingAddress.state.length !== 0\n      && cardPayloadData.billingAddress.country.length !== 0\n      && cardPayloadData.billingAddress.postalCode.length !== 0\n  ), [cardPayloadData]);\n\n  const submit = useCallback(() => {\n    if (isValid && cardPayloadData) {\n      if (!isAddressSame) {\n        open(CardBillingAddress);\n      } else {\n        cardPayloadData.shipping = {\n          shippingAddress: cardPayloadData.billingAddress\n        };\n        dispatch(createCard(cardPayloadData))\n          .then(() => {\n            if (replaceCardId) {\n              dispatch(cardDelete(replaceCardId))\n                .catch(apiErrorHandler)\n                .finally(() => {\n                  open(CardCreated);\n                });\n            } else {\n              open(CardCreated);\n            }\n          }).catch(apiErrorHandler);\n      }\n    }\n  }, [isValid, replaceCardId, isAddressSame, cardPayloadData]);\n\n  return (\n    <div className=\"page\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        submit();\n      }}\n      >\n        <MiniBox\n          heading={t(`create_card_info.title_${cardPayloadData?.cardType}`)}\n          onBack={goBack}\n          footer={(\n            <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n              {t('create_card_address.ctaText')}\n            </Button>\n)}\n        >\n          <Box width=\"100%\">\n            {cardPayloadData?.cardType === 'physical'\n              ? (\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Text variant=\"large\" textAlign=\"left\">\n                      {t('create_card_address.confirmBillingAddressTitle')}\n                    </Text>\n                    <Text variant=\"regular\" className=\"text-light\" textAlign=\"left\">{t('create_card_address.confirmBillingAddressDesc')}</Text>\n                  </Box>\n                  <Switch\n                    variant=\"primary\"\n                    defaultChecked={isAddressSame}\n                    onChange={() => {\n                      setAddressSame(!isAddressSame);\n                    }}\n                  />\n                </Flex>\n              ) : null }\n            <Text variant=\"large\" mt={3}>\n              {t('create_card_address.confirmMailingAddress')}\n            </Text>\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.address1')}\n              </FormLabel>\n              <AddressSearch\n                placeholder={t('create_card_address.address1')}\n                googleApiKey={process.env.REACT_APP_GMAP_KEY || ''}\n                address={cardPayloadData?.billingAddress || undefined}\n                restrictedCountry={cardPayloadData?.cardType === 'physical' ? 'US' : undefined}\n                onChange={(address) => {\n                  setPayload('billingAddress', {\n                    ...address,\n                    addressType: 'mailing',\n                  });\n                }}\n              />\n              {/* <Input variant=\"primary\" value=\"\" /> */}\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.address2')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.address2')}\n                value={cardPayloadData?.billingAddress?.line2}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    line2: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressCity')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressCity')}\n                value={cardPayloadData?.billingAddress?.city}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    city: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressState')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressState')}\n                value={cardPayloadData?.billingAddress?.state}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    state: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressZipcode')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressZipcode')}\n                value={cardPayloadData?.billingAddress?.postalCode}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    postalCode: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n          </Box>\n        </MiniBox>\n      </form>\n    </div>\n  );\n};\n\nexport default CardAddress;\n"],"names":["CardBillingAddress","React","CardCreated","_cardPayloadData$bill","_cardPayloadData$bill2","_cardPayloadData$bill3","_cardPayloadData$bill4","t","useTranslation","dispatch","useAppAsyncDispatch","_useDrawer","useDrawer","open","goBack","style","useStyleConfig","variant","_useState","useState","_useState2","_slicedToArray","isAddressSame","setAddressSame","cardPayloadData","useAppSelector","store","card","cardPayload","shallowEqual","replaceCardId","setPayload","useCallback","key","value","copiedData","_objectSpread","_defineProperty","updateCardPayload","isValid","useMemo","billingAddress","line1","city","state","country","postalCode","length","submit","shipping","shippingAddress","createCard","then","cardDelete","catch","apiErrorHandler","finally","_jsx","className","children","onSubmit","e","preventDefault","MiniBox","heading","concat","cardType","onBack","footer","Button","width","disabled","onClick","_jsxs","Box","Flex","alignItems","justifyContent","Text","textAlign","Switch","defaultChecked","onChange","mt","FormControl","FormLabel","AddressSearch","placeholder","googleApiKey","process","address","undefined","restrictedCountry","addressType","Input","line2","target"],"sourceRoot":""}