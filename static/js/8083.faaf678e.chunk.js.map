{"version":3,"file":"static/js/8083.faaf678e.chunk.js","mappings":"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","sources":["views/contacts/AddContact/AddContact.tsx"],"sourcesContent":["import React, {\n  useCallback, useEffect, useMemo, useState\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Button, FormControl, FormLabel, Input, useStyleConfig\n} from '@chakra-ui/react';\nimport PhoneInput, { isPossiblePhoneNumber } from 'react-phone-number-input';\nimport 'react-phone-number-input/style.css';\nimport { shallowEqual } from 'react-redux';\nimport MiniBox from '../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { createContact, updateContact } from '../../../store/middlewares/contact';\nimport { apiErrorHandler } from '../../../utils/general';\nimport { useDrawer } from '../../../hooks/drawer';\nimport { eventEmitter, Events } from '../../../utils/events';\n\n// interface Props {\n//   showPull?: boolean,\n//   showDepositCheck?: boolean,\n// }\n\nconst ContactDetails = React.lazy(() => import('../ContactDetails/ContactDetails'));\n\nconst AddContact = () => {\n  const { t } = useTranslation();\n  const [phone, setValue] = useState<any>('');\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n\n  const { close, open, data } = useDrawer<{isEdit?: boolean}>();\n  const dispatch = useAppAsyncDispatch();\n\n  const account = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const selectedContact = useAppSelector((store) => store.contact.selectedContact, shallowEqual);\n\n  const inputStyle:any = useStyleConfig('Input', {\n    variant: 'primary'\n  });\n\n  const isValid = useMemo(() => {\n    if (phone.length !== 0 && !isPossiblePhoneNumber(phone)) {\n      return false;\n    }\n    /* eslint-disable no-useless-escape */\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n    if (email.length !== 0 && !emailRegex.test(email)) {\n      return false;\n    }\n\n    return name.length !== 0;\n  }, [name, email, phone]);\n\n  const isEdit = useMemo(() => data?.isEdit && selectedContact?.id, [data, selectedContact]);\n\n  const transPrefix = useMemo(() => (isEdit ? 'edit_contact_details' : 'add_new_contact'), [isEdit]);\n\n  const submit = useCallback(() => {\n    if (account && isValid) {\n      if (isEdit && selectedContact?.id) {\n        dispatch(updateContact(selectedContact.id, {\n          accountId: account.id,\n          name,\n          email: email.length === 0 ? undefined : email,\n          phone: phone.length === 0 ? undefined : phone\n        })).then((c) => {\n          eventEmitter.dispatch(Events.CONTACT_REFRESH, {});\n          open(ContactDetails, {\n            id: c.id\n          });\n        }).catch(apiErrorHandler);\n      } else {\n        dispatch(createContact({\n          accountId: account.id,\n          name,\n          email: email.length === 0 ? undefined : email,\n          phone: phone.length === 0 ? undefined : phone\n        })).then(() => {\n          eventEmitter.dispatch(Events.CONTACT_REFRESH, {});\n          close();\n        }).catch(apiErrorHandler);\n      }\n    }\n  }, [account, name, email, phone, isValid, isEdit]);\n\n  useEffect(() => {\n    if (selectedContact && isEdit) {\n      setName(selectedContact.name);\n      setEmail(selectedContact.email || '');\n      setValue(selectedContact.phone || '');\n    }\n  }, [selectedContact, isEdit]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        heading={t(`${transPrefix}.title`)}\n        footer={(\n          <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n            {t(`${transPrefix}.ctaText`)}\n          </Button>\n        )}\n      >\n        <Box width=\"100%\" paddingTop=\"15px\">\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.personOrBusiness`)}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={name}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n            />\n          </FormControl>\n\n          <Box mb=\"24px\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.mobileNumber`)}\n            </FormLabel>\n            <PhoneInput\n              data-testid=\"mobileInput\"\n              style={inputStyle.field}\n              className=\"country-input\"\n              international\n              limitMaxLength\n              value={phone}\n              defaultCountry=\"US\"\n              countryCallingCodeEditable={false}\n              onChange={(v) => setValue(v || '')}\n            />\n          </Box>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.email`)}\n            </FormLabel>\n            <Input\n              value={email}\n              variant=\"primary\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            />\n          </FormControl>\n\n        </Box>\n      </MiniBox>\n\n    </div>\n  );\n};\n\nexport default AddContact;\n"],"names":["ContactDetails","React","t","useTranslation","_useState","useState","_useState2","_slicedToArray","phone","setValue","_useState3","_useState4","name","setName","_useState5","_useState6","email","setEmail","_useDrawer","useDrawer","close","open","data","dispatch","useAppAsyncDispatch","account","useAppSelector","store","selectedAccount","shallowEqual","selectedContact","contact","inputStyle","useStyleConfig","variant","isValid","useMemo","length","isPossiblePhoneNumber","test","isEdit","id","transPrefix","submit","useCallback","updateContact","accountId","undefined","then","c","eventEmitter","Events","CONTACT_REFRESH","catch","apiErrorHandler","createContact","useEffect","_jsx","className","children","MiniBox","heading","concat","footer","Button","width","disabled","onClick","_jsxs","Box","paddingTop","FormControl","FormLabel","Input","value","onChange","e","target","mb","PhoneInput","style","field","international","limitMaxLength","defaultCountry","countryCallingCodeEditable","v"],"sourceRoot":""}