{"version":3,"file":"static/js/2723.cd1c2a8b.chunk.js","mappings":"yUAoBaA,EAGR,SAACC,GAAO,MAAM,CACjBC,KAAMC,EAAAA,GACNF,QAAAA,EACD,EAOYG,EAGR,SAACH,GAAO,MAAM,CACjBC,KAAMG,EAAAA,GACNJ,QAAAA,EACD,EAOYK,EAAgD,SAACL,GAAO,MAAM,CACzEC,KAAMK,EAAAA,GACNN,QAAAA,EACD,EAOYO,EAGR,SAACP,GAAO,MAAM,CACjBC,KAAMO,EAAAA,GACNR,QAAAA,EACD,EAOYS,EAA+C,SAACT,GAAO,MAAM,CACxEC,KAAMS,EAAAA,GACNV,QAAAA,EACD,EAOYW,EAA0C,SAACX,GAAO,MAAM,CACnEC,KAAMW,EAAAA,EACNZ,QAAAA,EACD,EAOYa,EAAgD,SAACb,GAAO,MAAM,CACzEC,KAAMa,EAAAA,GACNd,QAAAA,EACD,EAOYe,EAAoD,SAACf,GAAO,MAAM,CAC7EC,KAAMe,EAAAA,GACNhB,QAAAA,EACD,C,oICrGD,EAAyB,yBAAzB,EAA+D,6B,uCCazDiB,EAAiBC,EAAAA,MAAW,kBAAM,iEAA8B,IAyCtE,EAvCiB,WACf,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MACjBC,GAAyBC,EAAAA,EAAAA,KAAjBC,EAAIF,EAAJE,KAAMC,EAAMH,EAANG,OAERC,GAAkBC,EAAAA,EAAAA,KAAe,SAACC,GAAK,OAAKA,EAAMC,QAAQH,eAAe,GAAEI,EAAAA,IAE3EC,GAAWC,EAAAA,EAAAA,cAAY,SAACC,GACxBP,IACFN,GAASR,EAAAA,EAAAA,IAAkB,CAAEqB,SAAAA,EAAUC,UAAWR,EAAgBS,GAAIC,SAAU,SAChFZ,EAAKR,GAET,GAAG,CAACU,IAEJ,OACEW,EAAAA,EAAAA,KAAA,OAAKC,UAAU,OAAMC,UACnBF,EAAAA,EAAAA,KAACG,EAAAA,EAAO,CACNC,UAAWC,EACXC,QAASzB,EAAE,0BACX0B,UAAQ,EACRC,OAAQ,WACNpB,GACF,EAAEc,UAEFO,EAAAA,EAAAA,MAACC,EAAAA,GAAG,CAACC,MAAM,OAAMT,SAAA,EACfO,EAAAA,EAAAA,MAACG,EAAAA,GAAM,CAACC,OAAO,kCAAkCZ,UAAWI,EAAcS,QAAS,kBAAMpB,EAAS,WAAW,EAACQ,SAAA,EAC5GF,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACC,QAAQ,QAAQC,GAAG,OAAMf,SAAErB,EAAE,oCACnCmB,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACC,KAAK,oBAAoBC,KAAM,GAAInB,UAAU,yBAErDQ,EAAAA,EAAAA,MAACG,EAAAA,GAAM,CAACC,OAAO,kCAAkCZ,UAAWI,EAAcS,QAAS,kBAAMpB,EAAS,UAAU,EAACQ,SAAA,EAC3GF,EAAAA,EAAAA,KAACe,EAAAA,GAAI,CAACC,QAAQ,QAAQC,GAAG,OAAMf,SAAErB,EAAE,mCACnCmB,EAAAA,EAAAA,KAACkB,EAAAA,EAAI,CAACC,KAAK,oBAAoBC,KAAM,GAAInB,UAAU,8BAM/D,C","sources":["store/actionCreators/card.ts","webpack://drop-in-ui/./src/views/cards/CardCreation/CardType/CardType.module.css?7c01","views/cards/CardCreation/CardType/CardType.tsx"],"sourcesContent":["import { actionCreator } from '..';\nimport {\n  atmData, card, cardPayload, sentCard\n} from '../../types/card';\nimport {\n  UPDATE_ATM_LIST_DATA,\n  UPDATE_ATM_LIST_LOADING,\n  UPDATE_CARDS_DATA,\n  UPDATE_SENT_CARDS_DATA,\n  UPDATE_CARDS_LIST_LOADING_STATE,\n  UPDATE_SELECTED_CARD_DATA,\n  UPDATE_CARD_PAYLOAD_DATA,\n  UPDATE_REPLACE_CARD_ID\n} from '../actionTypes/card';\n\n/**\n * update card list data\n * @param {*} payload\n * @returns {Action}\n */\nexport const updateCards: actionCreator<{\n  data: card[];\n  total: number;\n}> = (payload) => ({\n  type: UPDATE_CARDS_DATA,\n  payload,\n});\n\n/**\n * update sent card list data\n * @param {*} payload\n * @returns {Action}\n */\nexport const updateSentCards: actionCreator<{\n  data: sentCard[];\n  total: number;\n}> = (payload) => ({\n  type: UPDATE_SENT_CARDS_DATA,\n  payload,\n});\n\n/**\n * update atm list\n * @param {*} payload\n * @returns {Action}\n */\nexport const updateCardListLoading: actionCreator<boolean> = (payload) => ({\n  type: UPDATE_CARDS_LIST_LOADING_STATE,\n  payload,\n});\n\n/**\n * update atm list\n * @param {*} payload\n * @returns {Action}\n */\nexport const updateAtmList: actionCreator<{\n  data: atmData[];\n  total: number;\n}> = (payload) => ({\n  type: UPDATE_ATM_LIST_DATA,\n  payload,\n});\n\n/**\n * update atm list loading status\n * @param {*} payload\n * @returns {Action}\n */\nexport const updateAtmListLoading: actionCreator<boolean> = (payload) => ({\n  type: UPDATE_ATM_LIST_LOADING,\n  payload,\n});\n\n/**\n * Update current view card data\n * @param {card} payload\n * @returns {Action}\n */\nexport const updateSelectedCard: actionCreator<card> = (payload) => ({\n  type: UPDATE_SELECTED_CARD_DATA,\n  payload,\n});\n\n/**\n * Update card payload data\n * @param {card} payload\n * @returns {Action}\n */\nexport const updateCardPayload: actionCreator<cardPayload> = (payload) => ({\n  type: UPDATE_CARD_PAYLOAD_DATA,\n  payload,\n});\n\n/**\n * Update replace card id\n * @param {string} payload\n * @returns {Action}\n */\nexport const updateReplaceCardId: actionCreator<string | null> = (payload) => ({\n  type: UPDATE_REPLACE_CARD_ID,\n  payload,\n});\n","// extracted by mini-css-extract-plugin\nexport default {\"action\":\"CardType_action__OY8r7\",\"widgetBody\":\"CardType_widgetBody__1UFOD\"};","import React, { useCallback } from 'react';\nimport {\n  Text, HStack, Box\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport MiniBox from '../../../../layout/MiniBox';\nimport Icon from '../../../../components/Icon';\nimport style from './CardType.module.css';\nimport { updateCardPayload } from '../../../../store/actionCreators/card';\nimport { cardPayload } from '../../../../types/card';\nimport { useAppSelector } from '../../../../hooks/store';\nimport { useDrawer } from '../../../../hooks/drawer';\n\nconst CardCreateInfo = React.lazy(() => import('../CardInfo/CardInfo'));\n\nconst CardType = () => {\n  const { t } = useTranslation();\n  const dispatch = useDispatch();\n  const { open, goBack } = useDrawer();\n\n  const selectedAccount = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n\n  const onSelect = useCallback((cardType: cardPayload['cardType']) => {\n    if (selectedAccount) {\n      dispatch(updateCardPayload({ cardType, accountId: selectedAccount.id, currency: 'USD' } as cardPayload));\n      open(CardCreateInfo);\n    }\n  }, [selectedAccount]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        bodyClass={style.widgetBody}\n        heading={t('create_card_type.title')}\n        showBack\n        onBack={() => {\n          goBack();\n        }}\n      >\n        <Box width=\"100%\">\n          <HStack border=\"1px solid var(--border-color-1)\" className={style.action} onClick={() => onSelect('physical')}>\n            <Text variant=\"large\" mr=\"auto\">{t('create_card_type.physicalCard')}</Text>\n            <Icon icon=\"Arrow-small-right\" size={12} className=\"svg-light-grey-1\" />\n          </HStack>\n          <HStack border=\"1px solid var(--border-color-1)\" className={style.action} onClick={() => onSelect('virtual')}>\n            <Text variant=\"large\" mr=\"auto\">{t('create_card_type.virtualCard')}</Text>\n            <Icon icon=\"Arrow-small-right\" size={12} className=\"svg-light-grey-1\" />\n          </HStack>\n        </Box>\n      </MiniBox>\n    </div>\n  );\n};\n\nexport default CardType;\n"],"names":["updateCards","payload","type","UPDATE_CARDS_DATA","updateSentCards","UPDATE_SENT_CARDS_DATA","updateCardListLoading","UPDATE_CARDS_LIST_LOADING_STATE","updateAtmList","UPDATE_ATM_LIST_DATA","updateAtmListLoading","UPDATE_ATM_LIST_LOADING","updateSelectedCard","UPDATE_SELECTED_CARD_DATA","updateCardPayload","UPDATE_CARD_PAYLOAD_DATA","updateReplaceCardId","UPDATE_REPLACE_CARD_ID","CardCreateInfo","React","t","useTranslation","dispatch","useDispatch","_useDrawer","useDrawer","open","goBack","selectedAccount","useAppSelector","store","account","shallowEqual","onSelect","useCallback","cardType","accountId","id","currency","_jsx","className","children","MiniBox","bodyClass","style","heading","showBack","onBack","_jsxs","Box","width","HStack","border","onClick","Text","variant","mr","Icon","icon","size"],"sourceRoot":""}