{"version":3,"file":"static/js/2737.519b2aa5.chunk.js","mappings":"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","sources":["utils/gmap.ts","components/AddressSearch.tsx","views/cards/CardCreation/CardAddress/CardAddress.tsx"],"sourcesContent":["/* eslint-disable camelcase */\n// Google Map\n\nexport const findAddressComponent = (address_components:any[], target:string) => address_components.find((el) => el.types.includes(target));\n\nexport const formatGoogleMapData = (data:any) => {\n  const { address_components, geometry } = data;\n  const formattedData:any = {};\n  const ac = address_components;\n  const premise = findAddressComponent(ac, 'premise');\n  const street_number = findAddressComponent(ac, 'street_number');\n  const route = findAddressComponent(ac, 'route');\n  let city = findAddressComponent(ac, 'locality');\n  const sublocality_level_1 = findAddressComponent(ac, 'sublocality_level_1');\n  const postal_town = findAddressComponent(ac, 'postal_town');\n  const state = findAddressComponent(ac, 'administrative_area_level_1');\n  const country = findAddressComponent(ac, 'country');\n  const postal_code = findAddressComponent(ac, 'postal_code');\n\n  const addressLine1 = [street_number, premise, route];\n\n  if (!city) city = postal_town || sublocality_level_1;\n\n  formattedData.line1 = addressLine1\n    .filter((e) => e)\n    .map((e) => e.long_name)\n    .join(' ');\n  formattedData.line2 = null;\n  formattedData.city = city ? city.long_name : null;\n  formattedData.postalCode = postal_code ? postal_code.long_name : null;\n  formattedData.state = state ? state.short_name : null;\n\n  formattedData.country = country ? country.short_name : null;\n\n  formattedData.latitude = geometry.location.lat;\n  formattedData.longitude = geometry.location.lng;\n  return formattedData;\n};\n","import React, {\n  useEffect, useState, useRef, useMemo\n} from 'react';\nimport Autocomplete from 'react-google-autocomplete';\nimport { shallowEqual } from 'react-redux';\nimport { parsePhoneNumber } from 'react-phone-number-input';\nimport { Input } from '@chakra-ui/react';\nimport { useAppSelector } from '../hooks/store';\nimport { formatGoogleMapData } from '../utils/gmap';\n\ninterface Address {\n    addressType?: string;\n    line1: string;\n    line2: string;\n    city: string;\n    state: string;\n    postalCode: string;\n    country: string;\n}\n\ninterface Props {\n    googleApiKey: string;\n    address?: Address;\n    placeholder?: string;\n    restrictedCountry?: string;\n    international?: boolean;\n    onChange: (d: Address) => void;\n}\n\nconst AddressSearch = ({\n  address, onChange, googleApiKey, placeholder, restrictedCountry, international\n}: Props) => {\n  // const googleApiKey = process.env.REACT_APP_GMAPS_KEY;\n  const [addressState, updateAddress] = useState({ ...address });\n  const [keyword, updateKeyword] = useState(address?.line1 || '');\n  const addressRef = useRef<any>(null);\n\n  const person = useAppSelector(\n    (state) => state.user.personDetails,\n    shallowEqual,\n  );\n\n  const userCountry = useMemo(() => {\n    if (restrictedCountry) {\n      return restrictedCountry;\n    }\n    if (person?.phone) {\n      try {\n        const phone = parsePhoneNumber(person?.phone);\n        return phone?.country || 'US';\n      } catch (e) {\n        return 'US';\n      }\n    }\n    return 'US';\n  }, [person, restrictedCountry]);\n\n  useEffect(() => {\n    (window as any).gm_authFailure = () => {\n      // GMAP error handling\n      addressRef.current.disabled = false;\n      addressRef.current.placeholder = '';\n      addressRef.current.style.backgroundImage = '';\n      addressRef.current.focus();\n\n      return false;\n    };\n  }, []);\n\n  useEffect(() => {\n    if (address) {\n      updateAddress(address);\n      updateKeyword(address.line1);\n    }\n  }, [address]);\n\n  const forGoogleMapData = (details: any) => {\n    if (details) {\n      const {\n        line1, line2, city, state, postalCode, country\n      } = formatGoogleMapData(details);\n      const addressData = {\n        ...addressState,\n        line1,\n        line2,\n        city,\n        state,\n        country,\n        postalCode,\n      };\n      updateAddress(addressData);\n      onChange(addressData);\n      updateKeyword(line1);\n    }\n  };\n\n  return (\n\n    <Input\n      variant=\"primary\"\n      data-testid=\"address-line1\"\n      as={Autocomplete}\n      ref={addressRef}\n      apiKey={googleApiKey}\n      onPlaceSelected={forGoogleMapData}\n      value={keyword}\n      placeholder={placeholder || ''}\n      onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n        updateKeyword(e.target.value);\n        const addressData: any = {\n          ...addressState,\n          // country,\n          line1: e.target.value,\n        };\n        if (!international) {\n          addressData.country = userCountry;\n        }\n        onChange(addressData);\n      }}\n      options={{\n        types: ['address'],\n        componentRestrictions: international ? undefined : { country: userCountry }\n      }}\n    />\n\n  );\n};\n\nexport default AddressSearch;\n","import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, Button, Flex, FormControl, FormLabel, Input, Switch, Text, useStyleConfig\n} from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { shallowEqual } from 'react-redux';\nimport MiniBox from '../../../../layout/MiniBox';\nimport AddressSearch from '../../../../components/AddressSearch';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../../hooks/store';\nimport { apiErrorHandler } from '../../../../utils/general';\nimport { cardPayload } from '../../../../types/card';\nimport { updateCardPayload } from '../../../../store/actionCreators/card';\nimport { cardDelete, createCard } from '../../../../store/middlewares/card';\nimport { useDrawer } from '../../../../hooks/drawer';\n\nconst CardBillingAddress = React.lazy(() => import('../CardBillingAddress/CardBillingAddress'));\nconst CardCreated = React.lazy(() => import('../CardCreated/CardCreated'));\n\nconst CardAddress = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const { open, goBack } = useDrawer();\n\n  const style:any = useStyleConfig('FormControl', {\n    variant: 'primary'\n  });\n  const [isAddressSame, setAddressSame] = useState(true);\n  const cardPayloadData = useAppSelector((store) => store.card.cardPayload, shallowEqual);\n  const replaceCardId = useAppSelector((store) => store.card.replaceCardId);\n\n  const setPayload = useCallback((key: keyof cardPayload, value: any) => {\n    if (cardPayloadData) {\n      const copiedData:cardPayload = {\n        ...cardPayloadData,\n        [key]: value\n      };\n\n      dispatch(updateCardPayload(copiedData));\n    }\n  }, [cardPayloadData]);\n\n  const isValid = useMemo(() => (\n    cardPayloadData\n      && !!cardPayloadData.billingAddress\n      && !!cardPayloadData.billingAddress.line1\n      && !!cardPayloadData.billingAddress.city\n      && !!cardPayloadData.billingAddress.state\n      && !!cardPayloadData.billingAddress.country\n      && !!cardPayloadData.billingAddress.postalCode\n      && cardPayloadData.billingAddress.line1.length !== 0\n      && cardPayloadData.billingAddress.city.length !== 0\n      && cardPayloadData.billingAddress.state.length !== 0\n      && cardPayloadData.billingAddress.country.length !== 0\n      && cardPayloadData.billingAddress.postalCode.length !== 0\n  ), [cardPayloadData]);\n\n  const submit = useCallback(() => {\n    if (isValid && cardPayloadData) {\n      if (!isAddressSame) {\n        open(CardBillingAddress);\n      } else {\n        cardPayloadData.shipping = {\n          shippingAddress: cardPayloadData.billingAddress\n        };\n        dispatch(createCard(cardPayloadData))\n          .then(() => {\n            if (replaceCardId) {\n              dispatch(cardDelete(replaceCardId))\n                .catch(apiErrorHandler)\n                .finally(() => {\n                  open(CardCreated);\n                });\n            } else {\n              open(CardCreated);\n            }\n          }).catch(apiErrorHandler);\n      }\n    }\n  }, [isValid, replaceCardId, isAddressSame, cardPayloadData]);\n\n  return (\n    <div className=\"page\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        submit();\n      }}\n      >\n        <MiniBox\n          heading={t(`create_card_info.title_${cardPayloadData?.cardType}`)}\n          onBack={goBack}\n          footer={(\n            <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n              {t('create_card_address.ctaText')}\n            </Button>\n)}\n        >\n          <Box width=\"100%\">\n            {cardPayloadData?.cardType === 'physical'\n              ? (\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Box>\n                    <Text variant=\"large\" textAlign=\"left\">\n                      {t('create_card_address.confirmBillingAddressTitle')}\n                    </Text>\n                    <Text variant=\"regular\" className=\"text-light\" textAlign=\"left\">{t('create_card_address.confirmBillingAddressDesc')}</Text>\n                  </Box>\n                  <Switch\n                    variant=\"primary\"\n                    defaultChecked={isAddressSame}\n                    onChange={() => {\n                      setAddressSame(!isAddressSame);\n                    }}\n                  />\n                </Flex>\n              ) : null }\n            <Text variant=\"large\" mt={3}>\n              {t('create_card_address.confirmMailingAddress')}\n            </Text>\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.address1')}\n              </FormLabel>\n              <AddressSearch\n                placeholder={t('create_card_address.address1')}\n                googleApiKey={process.env.REACT_APP_GMAP_KEY || ''}\n                address={cardPayloadData?.billingAddress || undefined}\n                restrictedCountry={cardPayloadData?.cardType === 'physical' ? 'US' : undefined}\n                onChange={(address) => {\n                  setPayload('billingAddress', {\n                    ...address,\n                    addressType: 'mailing',\n                  });\n                }}\n              />\n              {/* <Input variant=\"primary\" value=\"\" /> */}\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.address2')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.address2')}\n                value={cardPayloadData?.billingAddress?.line2}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    line2: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressCity')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressCity')}\n                value={cardPayloadData?.billingAddress?.city}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    city: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressState')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressState')}\n                value={cardPayloadData?.billingAddress?.state}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    state: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\" style={style}>\n              <FormLabel variant=\"primary\">\n                {t('create_card_address.addressZipcode')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('create_card_address.addressZipcode')}\n                value={cardPayloadData?.billingAddress?.postalCode}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  setPayload('billingAddress', {\n                    ...cardPayloadData?.billingAddress || {},\n                    postalCode: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n          </Box>\n        </MiniBox>\n      </form>\n    </div>\n  );\n};\n\nexport default CardAddress;\n"],"names":["findAddressComponent","address_components","target","find","el","types","includes","_ref","address","onChange","googleApiKey","placeholder","restrictedCountry","international","_useState","useState","_objectSpread","_useState2","_slicedToArray","addressState","updateAddress","_useState3","line1","_useState4","keyword","updateKeyword","addressRef","useRef","person","useAppSelector","state","user","personDetails","shallowEqual","userCountry","useMemo","phone","parsePhoneNumber","country","e","useEffect","window","gm_authFailure","current","disabled","style","backgroundImage","focus","_jsx","Input","variant","as","Autocomplete","ref","apiKey","onPlaceSelected","details","_formatGoogleMapData","data","geometry","formattedData","ac","premise","street_number","route","city","sublocality_level_1","postal_town","postal_code","addressLine1","filter","map","long_name","join","line2","postalCode","short_name","latitude","location","lat","longitude","lng","formatGoogleMapData","addressData","value","options","componentRestrictions","undefined","CardBillingAddress","React","CardCreated","_cardPayloadData$bill","_cardPayloadData$bill2","_cardPayloadData$bill3","_cardPayloadData$bill4","t","useTranslation","dispatch","useAppAsyncDispatch","_useDrawer","useDrawer","open","goBack","useStyleConfig","isAddressSame","setAddressSame","cardPayloadData","store","card","cardPayload","replaceCardId","setPayload","useCallback","key","copiedData","_defineProperty","updateCardPayload","isValid","billingAddress","length","submit","shipping","shippingAddress","createCard","then","cardDelete","catch","apiErrorHandler","finally","className","children","onSubmit","preventDefault","MiniBox","heading","concat","cardType","onBack","footer","Button","width","onClick","_jsxs","Box","Flex","alignItems","justifyContent","Text","textAlign","Switch","defaultChecked","mt","FormControl","FormLabel","AddressSearch","process","addressType"],"sourceRoot":""}