{"version":3,"file":"static/js/1010.dd5356c6.chunk.js","mappings":"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","sources":["components/CurrencyInput.tsx","store/actionCreators/payment.ts","store/middlewares/payment.ts","views/payments/Check/Check.tsx"],"sourcesContent":["import React, { useLayoutEffect, useRef } from 'react';\nimport { Input } from '@chakra-ui/react';\nimport Inputmask from 'inputmask';\n\ntype Props = {\n    value: string;\n    placeholder?: string;\n    prefix?: string;\n    digits?: number;\n    onChange: (v: string) => void;\n}\n\nconst CurrencyInput:React.FC<Props> = ({\n  onChange, value, placeholder, prefix, digits\n}) => {\n  const input = useRef(null);\n\n  useLayoutEffect(() => {\n    if (input.current) {\n      Inputmask('currency', {\n        autoUnmask: true,\n        allowMinus: false,\n        prefix: prefix ?? '$ ',\n        placeholder,\n        rightAlign: false,\n        digits,\n        numericInput: true,\n        // positionCaretOnClick: 'ignore'\n      }).mask(input.current);\n    }\n  }, [prefix, digits, placeholder]);\n\n  return (\n  // eslint-disable-next-line react/jsx-props-no-spreading\n    <Input\n      data-testid=\"currency-input\"\n      variant=\"primary\"\n      placeholder={placeholder || '$ 0.00'}\n      ref={input}\n      onChange={(e:any) => {\n        const v = e.target.value;\n        onChange(v);\n      }}\n      value={value}\n    />\n  );\n};\n\nexport default CurrencyInput;\n","/* eslint-disable import/prefer-default-export */\nimport { actionCreator } from '..';\nimport { paymentResponse } from '../../types/payment';\nimport { UPDATE_PAYMENT_RESPONSE } from '../actionTypes/payment';\n\n/**\n * update core state\n * @param {*} payload\n * @returns {Action<string, any>}\n */\nexport const updatePaymentResponse: actionCreator<paymentResponse> = (payload) => ({\n  type: UPDATE_PAYMENT_RESPONSE,\n  payload\n});\n","import http from '../../utils/http';\nimport { loading } from '../../utils/general';\nimport { AsyncAppAction } from '..';\nimport { updatePaymentResponse } from '../actionCreators/payment';\nimport { paymentResponse } from '../../types/payment';\n\n/**\n * intrabank\n * @param payload\n * @returns\n */\nexport const intrabankPay = (payload: {\n    accountId: string,\n    contactId: string,\n    amount: string,\n    description: string\n  }): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n  /* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/intrabank', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const achPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/ach', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * wire\n * @param payload\n * @returns\n */\nexport const wirePay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'domestic' | 'international'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/wire', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * send a card\n * @param payload\n * @returns\n */\nexport const sendCardPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  description: string\n  type: 'virtual'\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/card', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n\n/**\n * ach\n * @param payload\n * @returns\n */\nexport const checkPay = (payload: {\n  accountId: string,\n  contactId: string,\n  amount: string,\n  type: 'physical',\n  description: string\n}): AsyncAppAction<paymentResponse> => (dispatch) => new Promise((resolve, reject) => {\n/* */\n  loading(true);\n  http\n    .post<paymentResponse>('v1/send/check', payload)\n    .then(({ data }) => {\n      dispatch(updatePaymentResponse(data));\n      resolve(data);\n    })\n    .catch(reject)\n    .finally(() => {\n      loading(false);\n    });\n});\n","import React, { useCallback, useMemo, useState } from 'react';\nimport {\n  Box, Button, FormControl, FormLabel, Input\n} from '@chakra-ui/react';\nimport { shallowEqual } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport MiniBox from '../../../layout/MiniBox';\nimport AddressSearch from '../../../components/AddressSearch';\nimport { updateContact } from '../../../store/middlewares/contact';\nimport { apiErrorHandler } from '../../../utils/general';\nimport { checkPay } from '../../../store/middlewares/payment';\nimport CurrencyInput from '../../../components/CurrencyInput';\nimport { useDrawer } from '../../../hooks/drawer';\n\nconst PaymentSuccess = React.lazy(() => import('../PaymentSuccess/PaymentSuccess'));\n\nconst Check:React.FC = () => {\n  const { t } = useTranslation();\n  const dispatch = useAppAsyncDispatch();\n  const { open } = useDrawer();\n\n  const contactDetails = useAppSelector((store) => store.contact.selectedContact, shallowEqual);\n  const account = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const [localContactDetails, updateContactData] = useState({\n    name: contactDetails?.name || '',\n    address: contactDetails?.check?.address || {\n      line1: '',\n      line2: '',\n      city: '',\n      state: '',\n      country: 'US',\n      postalCode: '',\n      addressType: 'legal',\n    }\n  });\n  const [paymentData, updatePaymentData] = useState({\n    amount: '',\n    description: '',\n  });\n\n  const isValid = useMemo(() => (\n    localContactDetails\n      && !!localContactDetails.address\n      && !!localContactDetails.address.line1\n      && !!localContactDetails.address.city\n      && !!localContactDetails.address.state\n      && !!localContactDetails.address.country\n      && !!localContactDetails.address.postalCode\n      && localContactDetails.address.line1.length !== 0\n      && localContactDetails.address.city.length !== 0\n      && localContactDetails.address.state.length !== 0\n      && localContactDetails.address.country.length !== 0\n      && localContactDetails.address.postalCode.length !== 0\n      && paymentData.amount.length !== 0\n      && paymentData.description.length !== 0\n  ), [localContactDetails, paymentData]);\n\n  const submit = useCallback(() => {\n    if (isValid && contactDetails && contactDetails.id && localContactDetails.address && account) {\n      dispatch(updateContact(contactDetails.id, {\n        accountId: contactDetails.accountId,\n        check: {\n          address: localContactDetails.address\n        }\n      })).then(() => {\n        dispatch(checkPay({\n          accountId: account.id,\n          contactId: contactDetails.id || '',\n          type: 'physical',\n          amount: paymentData.amount,\n          description: paymentData.description\n        })).then(() => {\n          open(PaymentSuccess);\n        }).catch(apiErrorHandler);\n      }).catch(apiErrorHandler);\n    }\n  }, [localContactDetails, contactDetails, isValid, account, paymentData]);\n\n  return (\n    <div className=\"page\">\n      <form onSubmit={(e) => {\n        e.preventDefault();\n        submit();\n      }}\n      >\n        <MiniBox\n          heading={t('payments_check.title')}\n          footer={(\n            <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n              {t('payments_check.ctaText')}\n            </Button>\n          )}\n        >\n          <Box width=\"100%\" paddingTop=\"15px\">\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.name')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                value={localContactDetails?.name || ''}\n                onChange={(e) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    name: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.address1')}\n              </FormLabel>\n              <AddressSearch\n                restrictedCountry=\"US\"\n                placeholder={t('payments_check.address1')}\n                googleApiKey={process.env.REACT_APP_GMAP_KEY}\n                address={localContactDetails?.address || undefined}\n                onChange={(address) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    address: {\n                      ...localContactDetails.address,\n                      ...address,\n                      addressType: 'legal',\n                    }\n                  });\n                }}\n              />\n              {/* <Input variant=\"primary\" value=\"\" /> */}\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.address2')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('payments_check.address2')}\n                value={localContactDetails?.address?.line2}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    address: {\n                      ...localContactDetails.address,\n                      line2: e.target.value,\n                    }\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.addressCity')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('payments_check.addressCity')}\n                value={localContactDetails?.address?.city}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    address: {\n                      ...localContactDetails.address,\n                      city: e.target.value,\n                    }\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.addressState')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('payments_check.addressState')}\n                value={localContactDetails?.address?.state}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    address: {\n                      ...localContactDetails.address,\n                      state: e.target.value,\n                    }\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.addressZipcode')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                placeholder={t('payments_check.addressZipcode')}\n                value={localContactDetails?.address?.postalCode}\n                onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                  updateContactData({\n                    ...localContactDetails,\n                    address: {\n                      ...localContactDetails.address,\n                      postalCode: e.target.value,\n                    }\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.amount')}\n              </FormLabel>\n              <CurrencyInput\n                value={paymentData.amount}\n                onChange={(value) => {\n                  updatePaymentData({\n                    ...paymentData,\n                    amount: value || ''\n                  });\n                }}\n              />\n            </FormControl>\n\n            <FormControl variant=\"primary\">\n              <FormLabel variant=\"primary\">\n                {t('payments_check.purpose')}\n              </FormLabel>\n              <Input\n                variant=\"primary\"\n                value={paymentData.description}\n                onChange={(e) => {\n                  updatePaymentData({\n                    ...paymentData,\n                    description: e.target.value\n                  });\n                }}\n              />\n            </FormControl>\n\n          </Box>\n        </MiniBox>\n      </form>\n    </div>\n  );\n};\n\nexport default Check;\n"],"names":["_ref","onChange","value","placeholder","prefix","digits","input","useRef","useLayoutEffect","current","Inputmask","autoUnmask","allowMinus","rightAlign","numericInput","mask","_jsx","Input","variant","ref","e","v","target","updatePaymentResponse","payload","type","UPDATE_PAYMENT_RESPONSE","intrabankPay","dispatch","Promise","resolve","reject","loading","http","post","then","data","catch","finally","achPay","_ref2","wirePay","_ref3","sendCardPay","_ref4","checkPay","_ref5","PaymentSuccess","React","_contactDetails$check","_localContactDetails$","_localContactDetails$2","_localContactDetails$3","_localContactDetails$4","t","useTranslation","useAppAsyncDispatch","open","useDrawer","contactDetails","useAppSelector","store","contact","selectedContact","shallowEqual","account","selectedAccount","_useState","useState","name","address","check","line1","line2","city","state","country","postalCode","addressType","_useState2","_slicedToArray","localContactDetails","updateContactData","_useState3","amount","description","_useState4","paymentData","updatePaymentData","isValid","useMemo","length","submit","useCallback","id","updateContact","accountId","contactId","apiErrorHandler","className","children","onSubmit","preventDefault","MiniBox","heading","footer","Button","width","disabled","onClick","_jsxs","Box","paddingTop","FormControl","FormLabel","_objectSpread","AddressSearch","restrictedCountry","googleApiKey","process","undefined","CurrencyInput"],"sourceRoot":""}