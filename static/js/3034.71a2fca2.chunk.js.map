{"version":3,"file":"static/js/3034.71a2fca2.chunk.js","mappings":"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","sources":["views/contacts/AddContact/AddContact.tsx"],"sourcesContent":["import React, {\n  useCallback, useEffect, useMemo, useState\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n  Box, Button, FormControl, FormLabel, Input, useStyleConfig\n} from '@chakra-ui/react';\nimport PhoneInput, { isPossiblePhoneNumber } from 'react-phone-number-input';\nimport 'react-phone-number-input/style.css';\nimport { shallowEqual } from 'react-redux';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport MiniBox from '../../../layout/MiniBox';\nimport { useAppAsyncDispatch, useAppSelector } from '../../../hooks/store';\nimport { createContact, updateContact } from '../../../store/middlewares/contact';\nimport { apiErrorHandler } from '../../../utils/general';\nimport { useModuleData, useModulePageData } from '../../../hooks/module';\nimport { sendMessage } from '../../../utils/sdk';\nimport { Data } from '../../../modules/Contacts';\nimport { ContactCreateData } from '../../../modules/Contacts/ContactCreate';\nimport { COMMON, CONTACT } from '../../../const/messages';\n\n// interface Props {\n//   showPull?: boolean,\n//   showDepositCheck?: boolean,\n// }\n\nconst AddContact = () => {\n  const { t } = useTranslation();\n  const [phone, setValue] = useState<any>('');\n  const [name, setName] = useState<string>('');\n  const [email, setEmail] = useState<string>('');\n\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n  const dispatch = useAppAsyncDispatch();\n\n  const account = useAppSelector((store) => store.account.selectedAccount, shallowEqual);\n  const selectedContact = useAppSelector((store) => store.contact.selectedContact, shallowEqual);\n\n  const inputStyle:any = useStyleConfig('Input', {\n    variant: 'primary'\n  });\n\n  const isValid = useMemo(() => {\n    if (phone.length !== 0 && !isPossiblePhoneNumber(phone)) {\n      return false;\n    }\n    /* eslint-disable no-useless-escape */\n    const emailRegex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w\\w+)+$/;\n    if (email.length !== 0 && !emailRegex.test(email)) {\n      return false;\n    }\n\n    return name.length !== 0;\n  }, [name, email, phone]);\n\n  const {\n    startScreen = 'contactList',\n  } = useModuleData<Data<'contactCreate'>>();\n\n  const { showBack } = useModulePageData<ContactCreateData, Data<'contactCreate'>['startScreen']>('contactCreate');\n\n  const isEdit = useMemo(() => pathname === '/contacts/edit' && selectedContact?.id, [pathname, selectedContact]);\n\n  const transPrefix = useMemo(() => (isEdit ? 'edit_contact_details' : 'add_new_contact'), []);\n\n  const submit = useCallback(() => {\n    if (account && isValid) {\n      if (isEdit && selectedContact?.id) {\n        dispatch(updateContact(selectedContact.id, {\n          accountId: account.id,\n          name,\n          email: email.length === 0 ? undefined : email,\n          phone: phone.length === 0 ? undefined : phone\n        })).then((c) => {\n          navigate(`/contacts/details/${c.id}`);\n        }).catch(apiErrorHandler);\n      } else {\n        dispatch(createContact({\n          accountId: account.id,\n          name,\n          email: email.length === 0 ? undefined : email,\n          phone: phone.length === 0 ? undefined : phone\n        })).then((c) => {\n          if (c.id) {\n            sendMessage(CONTACT.CONTACT_CREATED, { contactId: c.id });\n          }\n          if (startScreen === 'contactList') {\n            navigate('/contacts');\n          }\n        }).catch(apiErrorHandler);\n      }\n    }\n  }, [account, name, email, phone, isValid, isEdit]);\n\n  useEffect(() => {\n    if (selectedContact && isEdit) {\n      setName(selectedContact.name);\n      setEmail(selectedContact.email || '');\n      setValue(selectedContact.phone || '');\n    }\n  }, [selectedContact, isEdit]);\n\n  return (\n    <div className=\"page\">\n      <MiniBox\n        showBack={startScreen !== 'contactCreate' || !!showBack}\n        heading={t(`${transPrefix}.title`)}\n        footer={(\n          <Button width=\"100%\" variant=\"primary\" disabled={!isValid} onClick={submit}>\n            {t(`${transPrefix}.ctaText`)}\n          </Button>\n        )}\n        onBack={() => {\n          sendMessage(COMMON.BACK_PRESSED, { from: isEdit ? 'contactUpdate' : 'contactCreate' });\n          if (startScreen !== 'contactCreate') {\n            navigate(-1);\n          }\n        }}\n      >\n        <Box width=\"100%\" paddingTop=\"15px\">\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.personOrBusiness`)}\n            </FormLabel>\n            <Input\n              variant=\"primary\"\n              value={name}\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n            />\n          </FormControl>\n\n          <Box mb=\"24px\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.mobileNumber`)}\n            </FormLabel>\n            <PhoneInput\n              data-testid=\"mobileInput\"\n              style={inputStyle.field}\n              className=\"country-input\"\n              international\n              limitMaxLength\n              value={phone}\n              defaultCountry=\"US\"\n              countryCallingCodeEditable={false}\n              onChange={(v) => setValue(v || '')}\n            />\n          </Box>\n\n          <FormControl variant=\"primary\">\n            <FormLabel variant=\"primary\">\n              {t(`${transPrefix}.email`)}\n            </FormLabel>\n            <Input\n              value={email}\n              variant=\"primary\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) => setEmail(e.target.value)}\n            />\n          </FormControl>\n\n        </Box>\n      </MiniBox>\n\n    </div>\n  );\n};\n\nexport default AddContact;\n"],"names":["t","useTranslation","_useState","useState","_useState2","_slicedToArray","phone","setValue","_useState3","_useState4","name","setName","_useState5","_useState6","email","setEmail","navigate","useNavigate","pathname","useLocation","dispatch","useAppAsyncDispatch","account","useAppSelector","store","selectedAccount","shallowEqual","selectedContact","contact","inputStyle","useStyleConfig","variant","isValid","useMemo","length","isPossiblePhoneNumber","test","_useModuleData$startS","useModuleData","startScreen","showBack","useModulePageData","isEdit","id","transPrefix","submit","useCallback","updateContact","accountId","undefined","then","c","concat","catch","apiErrorHandler","createContact","sendMessage","CONTACT","CONTACT_CREATED","contactId","useEffect","_jsx","className","children","MiniBox","heading","footer","Button","width","disabled","onClick","onBack","COMMON","BACK_PRESSED","from","_jsxs","Box","paddingTop","FormControl","FormLabel","Input","value","onChange","e","target","mb","PhoneInput","style","field","international","limitMaxLength","defaultCountry","countryCallingCodeEditable","v"],"sourceRoot":""}